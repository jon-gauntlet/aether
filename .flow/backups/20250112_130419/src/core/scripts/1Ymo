#!/bin/bash

# Claude Autonomic Manager
# Manages Claude instances with zero cognitive overhead

set -euo pipefail

CURSOR_CONFIG="${CURSOR_CONFIG:-/home/jon/.config/cursor}"
CURSOR_SHARE="${CURSOR_SHARE:-/home/jon/.local/share/cursor}"
LOG_FILE="$CURSOR_SHARE/logs/claude_autonomic.log"
METRICS_DIR="$CURSOR_SHARE/metrics/claude"

# Ensure directories exist with proper permissions
mkdir -p "$(dirname "$LOG_FILE")" "$METRICS_DIR"
chmod -R u+rw "$(dirname "$LOG_FILE")" "$METRICS_DIR"

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> "$LOG_FILE"
}

check_cursor_process() {
    local type="$1"
    local pid_file="$CURSOR_SHARE/run/claude_${type}.pid"
    
    # First check PID file
    if [[ -f "$pid_file" ]]; then
        local pid
        pid=$(cat "$pid_file")
        if kill -0 "$pid" 2>/dev/null; then
            # Process exists and we can signal it
            return 0
        fi
    fi
    
    # Fallback to pgrep
    if pgrep -f "cursor.*CURSOR_CONTEXT_TYPE=$type" >/dev/null; then
        return 0
    fi
    
    log "Cursor $type instance not running"
    return 1
}

restart_claude() {
    local type="$1"
    local slice_name="cursor-claude-$type.slice"
    
    log "Attempting to restart $type Claude..."
    
    # First try gentle slice restart
    if systemctl --user try-restart "$slice_name"; then
        log "Successfully restarted $slice_name"
        sleep 5
        if check_cursor_process "$type"; then
            return 0
        fi
    fi
    
    # If that fails, force restart
    log "Forcing restart of $slice_name..."
    systemctl --user restart "$slice_name"
    sleep 5
    
    # Final check
    if ! check_cursor_process "$type"; then
        log "Failed to restart $type Claude"
        return 1
    fi
}

monitor_processes() {
    while true; do
        for type in project system; do
            if ! check_cursor_process "$type"; then
                restart_claude "$type"
            fi
        done
        sleep 30
    done
}

# Main execution
log "Starting Claude Autonomic Manager"
monitor_processes 