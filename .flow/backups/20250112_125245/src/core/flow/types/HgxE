#!/usr/bin/env bash

# Context Optimizer Service
# Optimizes context management and integration across the system

set -euo pipefail

# Core paths
CURSOR_CONFIG_DIR="${CURSOR_CONFIG_DIR:-$HOME/.config/cursor}"
CURSOR_DATA_DIR="${CURSOR_DATA_DIR:-$HOME/.local/share/cursor}"
BRAIN_DIR="${BRAIN_DIR:-$HOME/brain}"

# State paths
CONTEXT_DIR="$CURSOR_DATA_DIR/contexts"
SESSION_DIR="$CURSOR_DATA_DIR/crystallized"
PATTERN_DB="$CURSOR_DATA_DIR/autonomic/patterns/pattern_database.json"

# Knowledge paths
KNOWLEDGE_MAP="$BRAIN_DIR/KNOWLEDGE_MAP.md"
AUTONOMIC_MAP="$BRAIN_DIR/autonomic/AUTONOMIC_MAP.md"
INVISIBLE_MAP="$BRAIN_DIR/invisible/INVISIBLE_MAP.md"

# Service integration
META_LEARNER="$HOME/scripts/cursor/meta-learner"
ESSENCE_HARMONIZER="$HOME/scripts/cursor/essence-harmonizer"

# Initialize paths
mkdir -p "$CONTEXT_DIR" "$SESSION_DIR" "$(dirname "$PATTERN_DB")"

# Context optimization
optimize_context() {
    local context="$1"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    # Find related patterns
    local patterns=$(find "$CONTEXT_DIR" -type f -name "*.json" -mmin -1440 -exec grep -l "$context" {} \; | wc -l)
    
    # Record optimization
    echo "$timestamp - Context optimized: $context (patterns: $patterns)" >> "$SESSION_DIR/optimization.log"
}

# Pattern integration
integrate_patterns() {
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    # Find active patterns
    local active_patterns=$(find "$SESSION_DIR" -type f -name "session_*.json" -mmin -1440 -exec grep -l "$KNOWLEDGE_MAP" {} \; | sed '$s/,$//')
    
    # Record integration
    echo "$timestamp - Patterns integrated: $active_patterns" >> "$SESSION_DIR/integration.log"
}

# Flow optimization
optimize_flow() {
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    # Find flow states
    local flow_states=$(find "$CONTEXT_DIR" -type f -name "flow_*.json" -mmin -1440 | wc -l)
    
    # Record optimization
    echo "$timestamp - Flow optimized (states: $flow_states)" >> "$SESSION_DIR/flow.log"
}

# Knowledge synchronization
sync_knowledge() {
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    # Verify knowledge maps
    for map in "$KNOWLEDGE_MAP" "$AUTONOMIC_MAP" "$INVISIBLE_MAP"; do
        if [[ ! -f "$map" ]]; then
            echo "Warning: Missing knowledge map: $map"
            continue
        fi
    done
    
    # Record sync
    echo "$timestamp - Knowledge synchronized" >> "$SESSION_DIR/sync.log"
}

# System notification
notify_systemd() {
    if [ -n "${NOTIFY_SOCKET:-}" ]; then
        echo "READY=1"
        echo "STATUS=Context optimization active"
        echo "WATCHDOG=1"
    fi
}

# Main command handler
handle_command() {
    local command="$1"
    shift
    
    case "$command" in
        --optimize)
            optimize_context "$1"
            ;;
        --integrate)
            integrate_patterns
            ;;
        --flow)
            optimize_flow
            ;;
        --sync)
            sync_knowledge
            ;;
        *)
            echo "Usage: $0 {--optimize context|--integrate|--flow|--sync}"
            exit 1
            ;;
    esac
}

# Main service loop
main() {
    notify_systemd
    
    if [ $# -gt 0 ]; then
        handle_command "$@"
    else
        while true; do
            # Regular optimization cycle
            integrate_patterns
            optimize_flow
            sync_knowledge
            
            # Update systemd
            notify_systemd
            
            # Wait before next cycle
            sleep 300 # 5 minutes
        done
    fi
}

main "$@" 