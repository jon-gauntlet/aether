#!/bin/bash

# Dual Claude Launcher
# Manages Project and System Claude instances with optimized contexts

set -euo pipefail

CURSOR_CONFIG="/home/jon/.config/cursor"
CURSOR_SHARE="/home/jon/.local/share/cursor"
LOG_FILE="$CURSOR_SHARE/logs/claude_launcher.log"
PID_FILE="$CURSOR_SHARE/run/claude_launcher.pid"

mkdir -p "$(dirname "$LOG_FILE")" "$(dirname "$PID_FILE")"

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> "$LOG_FILE"
}

setup_claude() {
    local type="$1"
    local workspace="$2"
    local slice_name="cursor-claude-$type.slice"
    
    # Ensure slice is active
    if ! systemctl --user is-active "$slice_name" >/dev/null 2>&1; then
        systemctl --user start "$slice_name"
        log "Started $slice_name"
    fi
    
    # Initialize context
    /home/jon/scripts/cursor/context-crystallizer "$type"
    log "Initialized $type context"
    
    # Launch Cursor with nohup and proper redirection
    local cursor_log="$CURSOR_SHARE/logs/cursor_${type}.log"
    nohup env CURSOR_CONTEXT_TYPE="$type" \
        CURSOR_WORKSPACE="$workspace" \
        CURSOR_SLICE="$slice_name" \
        CURSOR_CLI=1 \
        cursor "$workspace" > "$cursor_log" 2>&1 &
    
    local cursor_pid=$!
    log "Launched $type Claude in $workspace (PID: $cursor_pid)"
    echo "$cursor_pid" > "$CURSOR_SHARE/run/claude_${type}.pid"
    
    # Give it a moment to start
    sleep 5
    
    # Verify process is still running
    if ! kill -0 "$cursor_pid" 2>/dev/null; then
        log "WARNING: $type Claude process died immediately"
        log "Last few lines of log:"
        tail -n 5 "$cursor_log" | while read -r line; do
            log "  $line"
        done
        return 1
    fi
    
    # Verify it's actually running
    if ! pgrep -f "cursor.*CURSOR_CONTEXT_TYPE=$type" >/dev/null; then
        log "WARNING: Cannot find $type Claude process"
        return 1
    fi
    
    log "Successfully started $type Claude"
    return 0
}

cleanup_old_sessions() {
    # Clean up any existing cursor sessions
    pkill -f "cursor.*$PROJECT_PATH" || true
    pkill -f "cursor.*/" || true
    log "Cleaned up existing Cursor sessions"
}

main() {
    # Configuration
    PROJECT_PATH="/home/jon/projects/aether"
    SYSTEM_PATH="/"

    # Main execution
    log "Starting Dual Claude setup"

    # Fork to background
    if [[ "${1:-}" != "forked" ]]; then
        "$0" forked &
        exit 0
    fi

    # Store PID
    echo $$ > "$PID_FILE"

    # Cleanup
    cleanup_old_sessions

    # Setup Project Claude
    setup_claude "project" "$PROJECT_PATH"

    # Setup System Claude
    setup_claude "system" "$SYSTEM_PATH"

    log "Dual Claude setup complete"

    # Keep running to maintain forked state
    while true; do
        sleep 60
        
        # Verify processes are still running
        for type in project system; do
            pid_file="$CURSOR_SHARE/run/claude_${type}.pid"
            if [[ -f "$pid_file" ]]; then
                pid=$(cat "$pid_file")
                if ! kill -0 "$pid" 2>/dev/null; then
                    log "Claude $type (PID: $pid) died, restarting..."
                    workspace=$([[ "$type" = "project" ]] && echo "$PROJECT_PATH" || echo "$SYSTEM_PATH")
                    setup_claude "$type" "$workspace"
                fi
            fi
        done
    done
}

main "$@" 