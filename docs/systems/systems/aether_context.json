{
  "project_context": {
    "core_architecture": {
      "layers": {
        "composites": {
          "description": "Layer for complex type compositions and shared interfaces",
          "location": "src/core/types/composites/",
          "key_files": {
            "space.ts": {
              "purpose": "Space-related types and interfaces",
              "key_types": {
                "SpaceConfig": "Core configuration for space initialization",
                "SpaceState": "Runtime state of a space instance",
                "SpaceMetadata": "Metadata and indexing information",
                "SpaceCapabilities": "Feature flags and capability definitions"
              },
              "type_relationships": {
                "SpaceConfig": ["Uses primitives for configuration", "Extended by specific space types"],
                "SpaceState": ["Composed from smaller state pieces", "Referenced by runtime systems"],
                "SpaceMetadata": ["Used for space indexing", "Extended for search capabilities"],
                "SpaceCapabilities": ["Defines feature availability", "Used in runtime checks"]
              }
            }
          },
          "patterns": {
            "type_composition": "Build complex types from smaller, focused ones",
            "interface_separation": "Keep interfaces clean and single-purpose",
            "capability_based": "Use capability types for feature flags"
          }
        },
        "primitives": {
          "location": "src/core/types/primitives/",
          "relationship": "Provides base types for composites"
        }
      }
    },
    "type_system": {
      "principles": {
        "composition": "Types are composed from smaller, focused types",
        "separation": "Clear separation between primitive and composite types",
        "reusability": "Types are designed for maximum reuse across the system",
        "capability_driven": "Features are controlled via capability types",
        "strict_null_checks": "Enforce explicit null handling",
        "readonly": "Prefer readonly types for immutability"
      },
      "key_patterns": {
        "space_types": {
          "location": "src/core/types/composites/space.ts",
          "purpose": "Define core space-related types and interfaces",
          "relationships": [
            "Builds on primitive types",
            "Used by higher-level space operations",
            "Supports core space functionality"
          ],
          "implementation_details": {
            "imports": ["Import primitives directly", "No circular dependencies"],
            "export_style": "Named exports for all types",
            "documentation": "TSDoc comments required"
          }
        }
      }
    },
    "development_flow": {
      "type_management": {
        "process": [
          "Identify needed types",
          "Place in appropriate layer",
          "Ensure proper imports",
          "Maintain clean interfaces",
          "Add comprehensive TSDoc",
          "Update related tests"
        ],
        "considerations": [
          "Type reusability",
          "Interface clarity",
          "Import organization",
          "Documentation completeness",
          "Test coverage",
          "Breaking changes"
        ]
      },
      "tooling": {
        "linting": {
          "rules": {
            "naming": "strict-pascal-case for types",
            "imports": "no-circular-dependencies",
            "documentation": "require-tsdoc-comments"
          }
        },
        "testing": {
          "type_tests": "Located alongside type definitions",
          "coverage": "Required for all new types"
        }
      }
    }
  },
  "current_focus": {
    "type_consolidation": {
      "status": "in_progress",
      "context": {
        "motivation": "Simplify type system and improve maintainability",
        "challenges": [
          "Complex type interdependencies",
          "Legacy type usage",
          "Documentation gaps"
        ]
      },
      "goals": [
        "Consolidate related types into composites layer",
        "Maintain clean separation of concerns",
        "Ensure proper type relationships",
        "Improve type documentation",
        "Add comprehensive tests"
      ],
      "next_steps": [
        "Continue type organization",
        "Verify import structures",
        "Document type relationships",
        "Add missing tests",
        "Update dependent systems"
      ],
      "progress": {
        "completed": [
          "Initial space.ts structure",
          "Basic type definitions",
          "Import organization"
        ],
        "pending": [
          "Complete type documentation",
          "Add comprehensive tests",
          "Update dependents"
        ]
      }
    }
  },
  "system_rules": {
    "type_organization": {
      "composites_layer": {
        "purpose": "House complex type compositions",
        "location": "src/core/types/composites/",
        "naming": "Domain-specific files (e.g., space.ts)",
        "structure": "Related types grouped by domain",
        "guidelines": {
          "file_organization": [
            "Related types in single file",
            "Maximum file size of 500 lines",
            "Clear type grouping"
          ],
          "documentation": [
            "TSDoc for all exports",
            "Usage examples",
            "Type relationships"
          ],
          "testing": [
            "Type tests alongside definitions",
            "Coverage requirements",
            "Edge case handling"
          ]
        }
      }
    }
  }
} 