name: Build and Push Docker Image

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
  workflow_dispatch:  # Allows manual triggering

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: aether-backend
  IMAGE_TAG: latest
  ECS_CLUSTER: aether-cluster
  ECS_SERVICE: aether-service

permissions:
  id-token: write
  contents: read

jobs:
  system-checks:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Verify system mounts and permissions
      run: |
        # Check mount options for critical directories
        echo "Verifying mount options..."
        mount | grep -E '(proc|sys|dev)' | grep -v 'nosuid,nodev,noexec'
        if [ $? -eq 0 ]; then
          echo "ERROR: Unsafe mount options detected"
          exit 1
        fi
        
        # Verify Poetry environment
        if ! command -v poetry &> /dev/null; then
          echo "ERROR: Poetry not found"
          exit 1
        fi
        
        # Check for system Python modifications
        if [ -w "/usr/bin/python3" ]; then
          echo "ERROR: System Python is writable"
          exit 1
        fi

  validate:
    needs: system-checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::061051250133:role/github-actions-role
        aws-region: ${{ env.AWS_REGION }}

    - name: Validate AWS CLI and permissions
      run: |
        # Verify AWS CLI works
        aws --version
        aws sts get-caller-identity
        
        # Check ECR access
        aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} || exit 1
        
        # Check ECS access
        aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} || exit 1

    - name: Validate Docker
      run: |
        docker --version
        docker info

  build:
    needs: validate
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::061051250133:role/github-actions-role
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      working-directory: ./backend
      run: |
        # Store previous image digest for potential rollback
        PREV_DIGEST=$(aws ecr describe-images --repository-name $ECR_REPOSITORY --image-ids imageTag=latest --query 'imageDetails[0].imageDigest' --output text || echo "")
        echo "PREV_DIGEST=$PREV_DIGEST" >> $GITHUB_ENV
        
        # Build and push new image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Basic Container Scan
      run: |
        # Quick security scan using docker scan
        docker scan $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --severity high || echo "WARNING: Security issues found"

    - name: Deploy to ECS
      run: |
        # Get current task definition
        TASK_DEF=$(aws ecs describe-task-definition --task-definition $(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].taskDefinition' --output text) --query 'taskDefinition' --output json)
        
        # Add health check to container definition
        CONTAINER_DEF=$(echo $TASK_DEF | jq '.containerDefinitions[0] + {
          "healthCheck": {
            "command": ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"],
            "interval": 30,
            "timeout": 5,
            "retries": 3,
            "startPeriod": 60
          }
        }')
        
        # Update task definition
        NEW_TASK_DEF=$(echo $TASK_DEF | jq --argjson container "$CONTAINER_DEF" '.containerDefinitions[0] = $container')
        echo "$NEW_TASK_DEF" > task-definition.json
        
        # Register new task definition
        NEW_TASK_ARN=$(aws ecs register-task-definition --cli-input-json file://task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)
        
        # Store current task definition for rollback
        echo "PREV_TASK_DEF=$TASK_DEF" >> $GITHUB_ENV
        
        # Deploy new version
        aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $NEW_TASK_ARN --force-new-deployment
        
        # Wait for deployment stability
        aws ecs wait services-stable --cluster $ECS_CLUSTER --services $ECS_SERVICE
        
        if [ $? -ne 0 ]; then
          echo "Deployment failed, initiating rollback..."
          if [ ! -z "$PREV_TASK_DEF" ]; then
            aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $PREV_TASK_DEF
            aws ecs wait services-stable --cluster $ECS_CLUSTER --services $ECS_SERVICE
          fi
          exit 1
        fi 