#!/usr/bin/env python3

import os
import sys
import json
import hashlib
from pathlib import Path
from datetime import datetime
from typing import Dict, Set, List

# Paths
CONTEXT_ROOT = Path.home() / '.context'
CACHE_ROOT = Path.home() / '.cache/cursor'
CONFIG_ROOT = Path.home() / '.config/cursor'
STATE_FILE = CACHE_ROOT / 'context/state.json'
FILESYSTEM_STATE = CACHE_ROOT / 'context/filesystem.json'

class ContextManager:
    def __init__(self):
        self.state: Dict = {}
        self.filesystem_state: Dict = {}
        self.changed_files: Set[str] = set()
        
    def scan_filesystem(self) -> Dict[str, str]:
        """Scan filesystem and return path->hash mapping"""
        file_hashes = {}
        roots = [CONTEXT_ROOT, CACHE_ROOT, CONFIG_ROOT]
        
        for root in roots:
            if not root.exists():
                continue
                
            for path in root.rglob('*'):
                if path.is_file() and not path.name.startswith('.'):
                    try:
                        file_hash = hashlib.md5(path.read_bytes()).hexdigest()
                        file_hashes[str(path)] = file_hash
                    except (PermissionError, FileNotFoundError):
                        continue
        
        return file_hashes
    
    def detect_changes(self) -> Set[str]:
        """Detect changed files since last run"""
        current = self.scan_filesystem()
        
        if not self.filesystem_state:
            # First run
            self.filesystem_state = current
            return set()
            
        changes = {
            path for path, hash_value in current.items()
            if path not in self.filesystem_state 
            or self.filesystem_state[path] != hash_value
        }
        
        self.filesystem_state = current
        return changes
    
    def load_state(self):
        """Load previous state"""
        if STATE_FILE.exists():
            with open(STATE_FILE) as f:
                self.state = json.load(f)
                
        if FILESYSTEM_STATE.exists():
            with open(FILESYSTEM_STATE) as f:
                self.filesystem_state = json.load(f)
    
    def save_state(self):
        """Save current state"""
        STATE_FILE.parent.mkdir(parents=True, exist_ok=True)
        
        self.state.update({
            'last_load': datetime.now().isoformat(),
            'load_count': self.state.get('load_count', 0) + 1,
            'changed_files': list(self.changed_files),
            'filesystem_scan_time': datetime.now().isoformat()
        })
        
        with open(STATE_FILE, 'w') as f:
            json.dump(self.state, f, indent=2)
            
        with open(FILESYSTEM_STATE, 'w') as f:
            json.dump(self.filesystem_state, f, indent=2)
    
    def prepare(self) -> int:
        """Prepare context system for loading"""
        try:
            # Ensure directories exist
            for path in [CONTEXT_ROOT, CACHE_ROOT, CONFIG_ROOT]:
                path.mkdir(parents=True, exist_ok=True)
            
            # Load previous state
            self.load_state()
            
            # Detect filesystem changes
            self.changed_files = self.detect_changes()
            
            # Save updated state
            self.save_state()
            
            return 0
            
        except Exception as e:
            print(f"Error preparing context: {e}", file=sys.stderr)
            return 1

def main():
    manager = ContextManager()
    return manager.prepare()

if __name__ == '__main__':
    sys.exit(main()) 