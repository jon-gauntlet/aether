#!/bin/bash
set -euo pipefail

# Check required dependencies
check_dependency() {
    if ! command -v "$1" >/dev/null 2>&1; then
        echo "Error: Required dependency '$1' is not installed" >&2
        exit 1
    fi
}

check_dependency kdialog
check_dependency cpupower

# Check sudo access for cpupower
if ! sudo -n true 2>/dev/null; then
    echo "Error: Sudo access required for cpupower. Please add to sudoers:" >&2
    echo "%wheel ALL=(ALL) NOPASSWD: /usr/bin/cpupower" >&2
    exit 1
fi

# Flow State Optimization
FLOW_STATE_FILE="$HOME/.cache/cursor/flow_state"
ENERGY_LOG="$HOME/.cache/cursor/energy/state.log"
CACHE_DIR="$(dirname "$FLOW_STATE_FILE")"
ENERGY_DIR="$(dirname "$ENERGY_LOG")"

# Ensure directories exist
for dir in "$CACHE_DIR" "$ENERGY_DIR" "$HOME/.cache/cursor/recovery/snapshots/$(date +%Y%m%d)"; do
    if ! mkdir -p "$dir" 2>/dev/null; then
        echo "Error: Failed to create directory: $dir" >&2
        exit 1
    fi
done

# Get system metrics safely
get_cpu_usage() {
    local usage
    usage=$(ps aux | grep -i "cursor" | awk '{print $3}' | awk '{s+=$1} END {print s}' || echo "0")
    echo "${usage:-0}"
}

get_commit_frequency() {
    local commits
    if git rev-parse --git-dir >/dev/null 2>&1; then
        commits=$(git log --since="30 minutes ago" --oneline 2>/dev/null | wc -l || echo "0")
        echo "${commits:-0}"
    else
        echo "0"
    fi
}

# Main flow state detection
detect_flow_state() {
    local cpu_usage commit_frequency
    cpu_usage=$(get_cpu_usage)
    commit_frequency=$(get_commit_frequency)

    if [ "${cpu_usage%.*}" -gt 20 ] || [ "$commit_frequency" -gt 3 ]; then
        echo "flow_state_detected" > "$FLOW_STATE_FILE"
        echo "$(date +%s) flow_state_active" >> "$ENERGY_LOG"
        
        # Optimize system for flow
        if ! sudo cpupower frequency-set -g performance >/dev/null 2>&1; then
            echo "Warning: Failed to set CPU governor to performance" >&2
        fi
        
        kdialog --passivepopup "Optimizing system for deep work" 3 --title "Flow State Detected"
        if command -v qdbus >/dev/null 2>&1; then
            qdbus org.kde.plasmashell /org/kde/osd showText "flow-state" "Flow State Detected"
        fi
        
        # Preserve context state
        if ! cp "$HOME/.cache/cursor/context/"*.json "$HOME/.cache/cursor/recovery/snapshots/$(date +%Y%m%d)/" 2>/dev/null; then
            echo "Warning: No context files to backup" >&2
        fi
    else
        echo "monitoring" > "$FLOW_STATE_FILE"
        echo "$(date +%s) flow_monitoring" >> "$ENERGY_LOG"
        kdialog --passivepopup "Watching for optimal conditions" 3 --title "Flow State Monitoring"
        if command -v qdbus >/dev/null 2>&1; then
            qdbus org.kde.plasmashell /org/kde/osd showText "flow-monitoring" "Flow State Monitoring"
        fi
    fi
}

# Main execution
detect_flow_state 