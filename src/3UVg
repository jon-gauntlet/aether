#!/bin/bash
set -euo pipefail

# Check required dependencies
check_dependency() {
    if ! command -v "$1" >/dev/null 2>&1; then
        echo "Error: Required dependency '$1' is not installed" >&2
        exit 1
    fi
}

check_dependency kdialog

# Ensure EDITOR is set
if [ -z "${EDITOR:-}" ]; then
    if command -v vim >/dev/null 2>&1; then
        EDITOR="vim"
    elif command -v nano >/dev/null 2>&1; then
        EDITOR="nano"
    else
        echo "Error: No editor found. Please set EDITOR environment variable" >&2
        exit 1
    fi
fi

# Define paths
NOTES_DIR="$HOME/.hidden_context/personal/notes"
CONTEXT_DIR="$HOME/.cache/cursor/context"
CONTEXT_LOG="$CONTEXT_DIR/notes.log"

# Ensure directories exist
for dir in "$NOTES_DIR" "$CONTEXT_DIR"; do
    if ! mkdir -p "$dir" 2>/dev/null; then
        echo "Error: Failed to create directory: $dir" >&2
        exit 1
    fi
done

# Generate safe filename
timestamp=$(date +"%Y%m%d_%H%M%S")
filename="$NOTES_DIR/note_${timestamp}.md"

# Create note
create_note() {
    local content="$*"
    {
        echo "# Note ($timestamp)"
        echo ""
        echo "## Context"
        echo "- Time: $(date '+%Y-%m-%d %H:%M:%S')"
        if git rev-parse --git-dir >/dev/null 2>&1; then
            echo "- Project: $(basename "$(git rev-parse --show-toplevel)" 2>/dev/null || echo "unknown")"
            echo "- Branch: $(git branch --show-current 2>/dev/null || echo "unknown")"
        fi
        echo ""
        echo "## Content"
        echo "$content"
        echo ""
        echo "## Tags"
        echo "- #quick-note"
        echo "- #cursor-note"
    } > "$filename"
}

# Update context
update_context() {
    # Log note creation
    echo "$(date +%s) note_created $filename" >> "$CONTEXT_LOG"
    
    # Touch all notes to update access time
    find "$NOTES_DIR" -name "*.md" -exec touch {} + 2>/dev/null || true
    
    # Optional: Update any related context files
    if [ -d "$CONTEXT_DIR" ]; then
        find "$CONTEXT_DIR" -name "*.json" -exec touch {} + 2>/dev/null || true
    fi
}

# Main execution
if [ $# -gt 0 ]; then
    # Create note from arguments
    create_note "$*"
    kdialog --passivepopup "$*" 3 --title "Note Captured"
    if command -v qdbus >/dev/null 2>&1; then
        qdbus org.kde.plasmashell /org/kde/osd showText "note-captured" "Note Captured"
    fi
else
    # Create empty note template and open editor
    create_note "Write your note here..."
    if ! "$EDITOR" "$filename"; then
        rm -f "$filename"
        echo "Error: Failed to edit note" >&2
        exit 1
    fi
    kdialog --passivepopup "$(basename "$filename")" 3 --title "Note Created"
    if command -v qdbus >/dev/null 2>&1; then
        qdbus org.kde.plasmashell /org/kde/osd showText "note-created" "Note Created"
    fi
fi

update_context 