#!/usr/bin/env zsh

# Gauntlet Command (g)
# Usage: g <command>

# Exit if being sourced
[[ $ZSH_EVAL_CONTEXT == *:file:* ]] && return 0

# Colors
[[ -z "$NO_COLOR" ]] && {
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    RED='\033[0;31m'
    NC='\033[0m'
}

# Data storage (single location)
DATA_DIR="$HOME/.local/share/gauntlet"
mkdir -p "$DATA_DIR"/{brain,sessions}

# Show help if needed
[[ "$1" == "help" || $# -eq 0 ]] && {
    cat << EOF
Gauntlet Command

Quick Start:
  g deep      Enter/exit deep work mode
  g note      Quick note or insight
  g brain     Manage BrainLifts
  g timer     Start focus timer
  g stats     Show progress

Deep Work Features:
- Blocks distractions
- Mutes notifications
- Orthodox Sunday check
- Focus tracking

Tips shown during use!
EOF
    exit 0
}

# Deep work state
DEEP_FILE="$DATA_DIR/deep_active"
HOSTS_BACKUP="/etc/hosts.bak"

# Toggle deep work mode
toggle_deep() {
    if [[ -f "$DEEP_FILE" ]]; then
        # Exit deep work
        sudo mv "$HOSTS_BACKUP" /etc/hosts
        notify-send "DUNST_COMMAND_RESUME"
        rm "$DEEP_FILE"
        echo -e "${GREEN}Exited Deep Work Mode${NC}"
    else
        # Check Sunday
        [[ $(date +%u) -eq 7 ]] && {
            echo -e "${YELLOW}Note: Today is Sunday. Consider your Orthodox observance.${NC}"
            read -p "Continue? [y/N] " confirm
            [[ "$confirm" != "y" ]] && return 1
        }
        
        # Enter deep work
        sudo cp /etc/hosts "$HOSTS_BACKUP"
        sudo sh -c 'cat >> /etc/hosts' << EOF
# Deep Work Mode
127.0.0.1 twitter.com www.twitter.com
127.0.0.1 facebook.com www.facebook.com
127.0.0.1 reddit.com www.reddit.com
127.0.0.1 youtube.com www.youtube.com
EOF
        notify-send "DUNST_COMMAND_PAUSE"
        date +%s > "$DEEP_FILE"
        
        echo -e "${GREEN}Entered Deep Work Mode${NC}"
        echo "Tips:"
        echo "1. Close extra browser tabs"
        echo "2. Phone in another room"
        echo "3. Water nearby"
        echo "4. g timer 45"
    fi
}

# Quick note
add_note() {
    local file="$DATA_DIR/brain/notes.md"
    echo -e "\n## $(date +%Y-%m-%d\ %H:%M)\n$*" >> "$file"
    echo -e "${GREEN}âœ“ Note added${NC}"
}

# Focus timer
start_timer() {
    local duration=${1:-25}
    local end=$(($(date +%s) + duration * 60))
    
    echo -e "${BLUE}Starting ${duration}min timer${NC}"
    while [ $(date +%s) -lt $end ]; do
        clear
        local remaining=$((end - $(date +%s)))
        local min=$((remaining / 60))
        local sec=$((remaining % 60))
        printf "${GREEN}%02d:%02d${NC} remaining\n" $min $sec
        sleep 1
    done
    
    notify-send "Timer Complete!" "${duration}min finished"
    echo -e "\n${GREEN}Timer complete!${NC}"
}

# Show stats
show_stats() {
    echo -e "\n${BLUE}Today's Progress:${NC}"
    
    # Deep work time
    if [[ -f "$DEEP_FILE" ]]; then
        local start=$(cat "$DEEP_FILE")
        local duration=$(( ($(date +%s) - start) / 60 ))
        echo "Current deep work: ${duration}min"
    fi
    
    # Notes count
    local notes=$(grep -c "^##" "$DATA_DIR/brain/notes.md")
    echo "Total notes: $notes"
    
    # Recent notes
    echo -e "\n${BLUE}Recent Notes:${NC}"
    tail -n 5 "$DATA_DIR/brain/notes.md"
}

# Manage BrainLifts
manage_brain() {
    local topic=${1:-}
    local file="$DATA_DIR/brain/${topic}.md"
    
    # List topics if none specified
    if [[ -z "$topic" ]]; then
        echo -e "\n${BLUE}BrainLift Topics:${NC}"
        ls -1 "$DATA_DIR/brain" | grep '.md$' | sed 's/.md$//'
        return
    fi
    
    # Create topic file if needed
    [[ -f "$file" ]] || {
        cat > "$file" << EOF
# $topic BrainLift
Created: $(date +%Y-%m-%d)

## Purpose
What to learn?

## Sources
Who/what to learn from?

## Insights
Key learnings

## Next
What's next?
EOF
    }
    
    # Open in editor
    ${EDITOR:-vim} "$file"
}

# Handle commands
case $1 in
    deep) toggle_deep ;;
    note) shift; add_note "$*" ;;
    timer) shift; start_timer "$1" ;;
    stats) show_stats ;;
    brain) shift; manage_brain "$1" ;;
    *) show_help ;;
esac 