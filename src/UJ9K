#!/bin/bash

# Autonomic Manager for Cursor System
# Implements IBM's MAPE-K loop (Monitor, Analyze, Plan, Execute, Knowledge)
# Integrates with AI-First Autonomic principles and SRE practices

set -euo pipefail

# Check for required dependencies
for cmd in jq systemctl curl; do
    if ! command -v "$cmd" >/dev/null 2>&1; then
        echo "Error: Required command '$cmd' not found" >&2
        exit 1
    fi
done

# Configuration
CURSOR_CONFIG_DIR="${CURSOR_CONFIG_DIR:-$HOME/.config/cursor}"
CURSOR_STATE_DIR="${CURSOR_STATE_DIR:-$HOME/.local/state/cursor}"
CURSOR_DATA_DIR="${CURSOR_DATA_DIR:-$HOME/.local/share/cursor}"
AUTONOMIC_STATE="$CURSOR_STATE_DIR/autonomic"
KNOWLEDGE_BASE="$AUTONOMIC_STATE/knowledge.json"
HEALTH_METRICS="$AUTONOMIC_STATE/health_metrics.json"

# Create required directories
mkdir -p "$AUTONOMIC_STATE"/{knowledge,metrics,patterns}

# Initialize knowledge base if needed
if [ ! -f "$KNOWLEDGE_BASE" ]; then
    echo '{
        "services": {
            "context-crystallizer": {"health": 100, "incidents": 0},
            "essence-integrator": {"health": 100, "incidents": 0}
        },
        "patterns": [],
        "thresholds": {
            "cpu_high": 80,
            "memory_high": 85,
            "restart_threshold": 3,
            "incident_window": 3600
        }
    }' > "$KNOWLEDGE_BASE"
fi

# Logging
log() {
    echo "[$(date -Iseconds)] $*" >&2
}

# Monitor: Collect system metrics and service status
monitor_services() {
    local service_metrics="{}"
    
    for service in context-crystallizer essence-integrator; do
        local status=$(systemctl --user show "$service.service" --property=ActiveState,SubState,NRestarts)
        local memory=$(systemctl --user show "$service.service" --property=MemoryCurrent | cut -d= -f2)
        local cpu=$(systemctl --user show "$service.service" --property=CPUUsageNSec | cut -d= -f2)
        
        service_metrics=$(echo "$service_metrics" | jq --arg svc "$service" \
            --arg status "$status" \
            --arg mem "$memory" \
            --arg cpu "$cpu" \
            '. + {($svc): {
                "status": $status,
                "memory": $mem,
                "cpu": $cpu,
                "timestamp": now
            }}')
    done
    
    echo "$service_metrics" > "$HEALTH_METRICS"
}

# Analyze: Detect anomalies and potential issues
analyze_health() {
    local metrics service_name
    metrics=$(cat "$HEALTH_METRICS")
    
    for service in context-crystallizer essence-integrator; do
        service_name="$service.service"
        
        # Check if service is running
        if ! systemctl --user is-active "$service_name" >/dev/null 2>&1; then
            log "Service $service_name is not running"
            handle_incident "$service" "service_down"
            continue
        fi
        
        # Check resource usage
        local cpu_usage=$(echo "$metrics" | jq -r ".$service.cpu")
        local mem_usage=$(echo "$metrics" | jq -r ".$service.memory")
        
        if [ "$cpu_usage" -gt 80 ]; then
            log "High CPU usage detected for $service_name"
            handle_incident "$service" "high_cpu"
        fi
        
        if [ "$mem_usage" -gt 85 ]; then
            log "High memory usage detected for $service_name"
            handle_incident "$service" "high_memory"
        fi
    done
}

# Plan & Execute: Take corrective actions
handle_incident() {
    local service=$1
    local incident_type=$2
    local knowledge
    
    knowledge=$(cat "$KNOWLEDGE_BASE")
    
    # Update incident count
    knowledge=$(echo "$knowledge" | jq --arg svc "$service" \
        '.services[$svc].incidents += 1')
    
    case "$incident_type" in
        "service_down")
            log "Attempting to restart $service"
            systemctl --user restart "$service.service"
            ;;
        "high_cpu"|"high_memory")
            log "Optimizing $service"
            optimize_service "$service"
            ;;
    esac
    
    # Update knowledge base
    echo "$knowledge" > "$KNOWLEDGE_BASE"
}

optimize_service() {
    local service=$1
    
    case "$service" in
        "context-crystallizer")
            # Trigger context optimization
            if [[ -f "$CURSOR_STATE_DIR/active_context.json" ]]; then
                log "Triggering context optimization"
                echo '{"command": "optimize"}' > "$CURSOR_STATE_DIR/commands.json"
            fi
            ;;
        "essence-integrator")
            # Trigger knowledge base optimization
            if [[ -d "$CURSOR_CONFIG_DIR/contexts" ]]; then
                log "Triggering essence optimization"
                touch "$CURSOR_STATE_DIR/optimize_essence"
            fi
            ;;
    esac
}

# Self-Learning: Update knowledge base with new patterns
learn_patterns() {
    local metrics service_name
    metrics=$(cat "$HEALTH_METRICS")
    
    # Analyze service behavior patterns
    for service in context-crystallizer essence-integrator; do
        local pattern_file="$AUTONOMIC_STATE/patterns/${service}_patterns.json"
        
        # Extract and store patterns
        jq -n --arg svc "$service" \
           --arg metrics "$metrics" \
           '{
                "service": $svc,
                "timestamp": now,
                "metrics": ($metrics | fromjson),
                "pattern_type": "behavior"
            }' > "$pattern_file"
    done
}

# Main loop implementing MAPE-K
log "Starting Autonomic Manager"

while true; do
    # Monitor
    monitor_services
    
    # Analyze
    analyze_health
    
    # Learn
    learn_patterns
    
    # Wait before next iteration
    sleep 30
done 