#!/bin/bash
# Flow Manager
# This script manages flow states and context preservation.

# Core paths
WORKSPACE="/home/jon/workspace/gauntlet"
BRAIN_DIR="/home/jon/brain"
CONFIG_DIR="/home/jon/.config/cursor"
LOCAL_STATE="/home/jon/.local/state/cursor"
LOCAL_SHARE="/home/jon/.local/share/cursor"

# State paths
FLOW_STATE="$LOCAL_STATE/flow"
CONTEXT_STATE="$LOCAL_STATE/context"
PATTERN_STATE="$LOCAL_STATE/patterns"
FLOW_LOG="$FLOW_STATE/flow.log"

# Ensure state directories exist
mkdir -p "$FLOW_STATE" "$CONTEXT_STATE" "$PATTERN_STATE"
touch "$FLOW_LOG"

# Flow state management
function get_flow_state() {
  if [[ -f "$FLOW_STATE/current" ]]; then
    cat "$FLOW_STATE/current"
  else
    echo "normal"
  fi
}

function set_flow_state() {
  local state="$1"
  echo "$state" > "$FLOW_STATE/current"
  log_flow "State changed to: $state"
}

function log_flow() {
  local message="$1"
  echo "$(date '+%Y-%m-%d %H:%M:%S'): $message" >> "$FLOW_LOG"
}

# Context preservation
function save_context() {
  local context="$1"
  echo "$context" > "$CONTEXT_STATE/current"
  log_flow "Context saved: $context"
}

function restore_context() {
  if [[ -f "$CONTEXT_STATE/current" ]]; then
    cat "$CONTEXT_STATE/current"
  else
    echo "default"
  fi
}

# Pattern management
function save_pattern() {
  local pattern="$1"
  echo "$pattern" >> "$PATTERN_STATE/patterns.log"
  log_flow "Pattern saved: $pattern"
}

function get_patterns() {
  if [[ -f "$PATTERN_STATE/patterns.log" ]]; then
    tail -n 10 "$PATTERN_STATE/patterns.log"
  fi
}

# Flow protection
function protect_flow() {
  local current_state=$(get_flow_state)
  
  case "$current_state" in
    deep)
      # Maximize focus
      log_flow "Protecting deep flow state"
      ;;
    normal)
      # Balance focus
      log_flow "Maintaining normal flow state"
      ;;
    recovery)
      # Enable recovery
      log_flow "Supporting recovery state"
      ;;
  esac
}

# State transitions
function transition_state() {
  local from_state=$(get_flow_state)
  local to_state="$1"
  
  log_flow "Transitioning from $from_state to $to_state"
  set_flow_state "$to_state"
  protect_flow
}

# Main logic
case "$1" in
  --deep)
    transition_state "deep"
    ;;
  --normal)
    transition_state "normal"
    ;;
  --recovery)
    transition_state "recovery"
    ;;
  --save-context)
    save_context "$2"
    ;;
  --restore-context)
    restore_context
    ;;
  --save-pattern)
    save_pattern "$2"
    ;;
  --get-patterns)
    get_patterns
    ;;
  --status)
    echo "Current flow state: $(get_flow_state)"
    echo "Current context: $(restore_context)"
    echo "Recent patterns:"
    get_patterns
    ;;
  --reset)
    set_flow_state "normal"
    rm -f "$CONTEXT_STATE/current"
    echo "{}" > "$PATTERN_STATE/patterns.log"
    log_flow "State reset to defaults"
    ;;
  *)
    echo "Usage: $0 {--deep|--normal|--recovery|--save-context|--restore-context|--save-pattern|--get-patterns|--status|--reset}"
    exit 1
    ;;
esac

exit 0 