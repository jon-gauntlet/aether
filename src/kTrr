#!/usr/bin/env zsh

# Gauntlet AI Setup (setup)
# Usage: setup [command]
#   setup check  # Check environment
#   setup init   # Initialize workspace

# Exit if being sourced
[[ $ZSH_EVAL_CONTEXT == *:file:* ]] && return 0

# Colors
[[ -z "$NO_COLOR" ]] && {
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    RED='\033[0;31m'
    NC='\033[0m'
}

# Data storage
DATA_DIR="$HOME/.local/share/gauntlet"
mkdir -p "$DATA_DIR"

# Show help if needed
[[ "$1" == "help" || $# -eq 0 ]] && {
    cat << EOF
Gauntlet AI Setup

Quick Start:
  setup check  Check environment
  setup init   Initialize workspace
  setup tools  Install required tools

Features:
- Verifies development environment
- Sets up notification rules
- Configures deep work mode
- Installs required tools
EOF
    exit 0
}

# Check environment
check_env() {
    echo -e "\n${BLUE}Checking Environment:${NC}"
    
    # Check required tools
    local tools=(git curl zsh dunst aws)
    for tool in "${tools[@]}"; do
        if command -v $tool &> /dev/null; then
            echo -e "${GREEN}✓${NC} $tool installed"
        else
            echo -e "${RED}✗${NC} $tool missing"
        fi
    done
    
    # Check AWS setup
    if [[ -f ~/.aws/credentials ]]; then
        echo -e "${GREEN}✓${NC} AWS credentials found"
    else
        echo -e "${RED}✗${NC} AWS credentials missing"
    fi
    
    # Check notification setup
    if systemctl --user is-active --quiet dunst; then
        echo -e "${GREEN}✓${NC} Notification daemon running"
    else
        echo -e "${RED}✗${NC} Notification daemon not running"
    fi
    
    # Check workspace
    if [[ -d ~/workspace ]]; then
        echo -e "${GREEN}✓${NC} Workspace directory exists"
    else
        echo -e "${RED}✗${NC} Workspace directory missing"
    fi
}

# Initialize workspace
init_workspace() {
    echo -e "\n${BLUE}Initializing Workspace:${NC}"
    
    # Create directories
    mkdir -p ~/workspace/{gauntlet,brainlifts,projects}
    echo -e "${GREEN}✓${NC} Created workspace directories"
    
    # Setup notification rules
    mkdir -p ~/.config/dunst
    cat > ~/.config/dunst/dunstrc << EOF
[global]
    follow = mouse
    geometry = "300x5-30+20"
    indicate_hidden = yes
    transparency = 10
    separator_height = 2
    padding = 8
    horizontal_padding = 8
    frame_width = 3
    frame_color = "#aaaaaa"
    separator_color = frame
    sort = yes
    idle_threshold = 120
    font = Monospace 10
    line_height = 0
    markup = full
    format = "<b>%s</b>\n%b"
    alignment = left
    show_age_threshold = 60
    word_wrap = yes
    ignore_newline = no
    stack_duplicates = true
    hide_duplicate_count = false
    show_indicators = yes
    icon_position = off
    max_icon_size = 32
    sticky_history = yes
    history_length = 20
    browser = /usr/bin/xdg-open
    always_run_script = true
    title = Dunst
    class = Dunst
    startup_notification = false
    force_xinerama = false

[urgency_low]
    background = "#222222"
    foreground = "#888888"
    timeout = 10

[urgency_normal]
    background = "#285577"
    foreground = "#ffffff"
    timeout = 10

[urgency_critical]
    background = "#900000"
    foreground = "#ffffff"
    frame_color = "#ff0000"
    timeout = 0

[focus_mode]
    appname = "deep"
    urgency = low
    timeout = 5
EOF
    echo -e "${GREEN}✓${NC} Configured notifications"
    
    # Setup deep work mode
    sudo cp /etc/hosts /etc/hosts.bak
    echo -e "${GREEN}✓${NC} Backed up hosts file"
    
    # Create README
    cat > ~/workspace/README.md << EOF
# Gauntlet AI Workspace

## Structure
- \`gauntlet/\` - Gauntlet program files
- \`brainlifts/\` - Learning and notes
- \`projects/\` - Project workspaces

## Tools
- \`deep\` - Deep work mode
- \`brain\` - BrainLift manager
- \`focus\` - Focus timer
- \`pair\` - AI pair programming

## Tips
1. Use deep work mode for focus
2. Track learning in BrainLifts
3. Time-box with focus timer
4. Pair program with AI helper
EOF
    echo -e "${GREEN}✓${NC} Created workspace README"
}

# Install required tools
install_tools() {
    echo -e "\n${BLUE}Installing Required Tools:${NC}"
    
    # Install system packages
    sudo pacman -S --needed dunst libnotify curl git aws-cli
    
    # Install AWS tools
    pip install --user awscli
    
    echo -e "${GREEN}✓${NC} Installed required tools"
    
    # Restart notification daemon
    systemctl --user restart dunst
    echo -e "${GREEN}✓${NC} Restarted notification daemon"
}

# Handle commands
case $1 in
    check) check_env ;;
    init) init_workspace ;;
    tools) install_tools ;;
    *) show_help ;;
esac 