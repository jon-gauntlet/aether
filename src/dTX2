#!/usr/bin/env python3

import os
import sys
import json
from pathlib import Path
from datetime import datetime

# Paths
CONTEXT_ROOT = Path.home() / '.context'
CACHE_ROOT = Path.home() / '.cache/cursor'
STATE_FILE = CACHE_ROOT / 'context/state.json'
PATTERNS_FILE = CONTEXT_ROOT / 'integration/patterns.log'

def integrate_context():
    """Integrate loaded context and recognize patterns"""
    
    # Load state
    if not STATE_FILE.exists():
        return 1
        
    with open(STATE_FILE) as f:
        state = json.load(f)
    
    # Record patterns
    PATTERNS_FILE.parent.mkdir(parents=True, exist_ok=True)
    with open(PATTERNS_FILE, 'a') as f:
        f.write(f"\n--- Context Load {state['load_count']} at {state['last_load']} ---\n")
        
        # Record core paths loaded
        core_paths = list((CONTEXT_ROOT / 'core').glob('**/*.md'))
        f.write(f"Core paths loaded: {len(core_paths)}\n")
        
        # Record flow paths
        flow_paths = list((CONTEXT_ROOT / 'flows').glob('**/*.md'))
        f.write(f"Flow paths loaded: {len(flow_paths)}\n")
        
        # Record integration
        f.write(f"Total context loads: {state['load_count']}\n")
    
    # Return success
    return 0

if __name__ == '__main__':
    sys.exit(integrate_context()) 