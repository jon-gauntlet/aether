#!/bin/bash
# Essence Harmonizer
# This script manages system harmony and integration.

# Core paths
WORKSPACE="/home/jon/workspace/gauntlet"
BRAIN_DIR="/home/jon/brain"
CONFIG_DIR="/home/jon/.config/cursor"
LOCAL_STATE="/home/jon/.local/state/cursor"
LOCAL_SHARE="/home/jon/.local/share/cursor"

# State paths
PATTERN_DB="$LOCAL_SHARE/autonomic/patterns/pattern_database.json"
CONTEXT_CACHE="$LOCAL_SHARE/essence/context.cache"
SESSION_DIR="$LOCAL_SHARE/crystallized"
HARMONY_LOG="$LOCAL_STATE/harmony/harmony.log"

# Ensure state directories exist
mkdir -p "$LOCAL_STATE/harmony" "$(dirname "$PATTERN_DB")" "$(dirname "$CONTEXT_CACHE")" "$SESSION_DIR"
touch "$HARMONY_LOG"

# Logging
function log_harmony() {
  local message="$1"
  echo "$(date '+%Y-%m-%d %H:%M:%S'): $message" >> "$HARMONY_LOG"
}

# Harmony management
function check_harmony() {
  local issues=0
  
  # Check pattern database
  if [[ ! -f "$PATTERN_DB" ]]; then
    log_harmony "Pattern database missing"
    ((issues++))
  fi
  
  # Check context cache
  if [[ ! -f "$CONTEXT_CACHE" ]]; then
    log_harmony "Context cache missing"
    ((issues++))
  fi
  
  # Check session directory
  if [[ ! -d "$SESSION_DIR" ]]; then
    log_harmony "Session directory missing"
    ((issues++))
  fi
  
  return $issues
}

function restore_harmony() {
  # Restore pattern database
  if [[ ! -f "$PATTERN_DB" ]]; then
    echo "{}" > "$PATTERN_DB"
    log_harmony "Pattern database restored"
  fi
  
  # Restore context cache
  if [[ ! -f "$CONTEXT_CACHE" ]]; then
    echo "{}" > "$CONTEXT_CACHE"
    log_harmony "Context cache restored"
  fi
  
  # Restore session directory
  if [[ ! -d "$SESSION_DIR" ]]; then
    mkdir -p "$SESSION_DIR"
    log_harmony "Session directory restored"
  fi
}

# Integration management
function check_integration() {
  local issues=0
  
  # Check knowledge map
  if [[ ! -f "$BRAIN_DIR/KNOWLEDGE_MAP.md" ]]; then
    log_harmony "Knowledge map missing"
    ((issues++))
  fi
  
  # Check autonomic map
  if [[ ! -f "$BRAIN_DIR/autonomic/AUTONOMIC_MAP.md" ]]; then
    log_harmony "Autonomic map missing"
    ((issues++))
  fi
  
  # Check sacred map
  if [[ ! -f "$BRAIN_DIR/sacred/SACRED_MAP.md" ]]; then
    log_harmony "Sacred map missing"
    ((issues++))
  fi
  
  return $issues
}

function restore_integration() {
  # Restore knowledge map
  if [[ ! -f "$BRAIN_DIR/KNOWLEDGE_MAP.md" ]]; then
    mkdir -p "$BRAIN_DIR"
    touch "$BRAIN_DIR/KNOWLEDGE_MAP.md"
    log_harmony "Knowledge map restored"
  fi
  
  # Restore autonomic map
  if [[ ! -f "$BRAIN_DIR/autonomic/AUTONOMIC_MAP.md" ]]; then
    mkdir -p "$BRAIN_DIR/autonomic"
    touch "$BRAIN_DIR/autonomic/AUTONOMIC_MAP.md"
    log_harmony "Autonomic map restored"
  fi
  
  # Restore sacred map
  if [[ ! -f "$BRAIN_DIR/sacred/SACRED_MAP.md" ]]; then
    mkdir -p "$BRAIN_DIR/sacred"
    touch "$BRAIN_DIR/sacred/SACRED_MAP.md"
    log_harmony "Sacred map restored"
  fi
}

# Balance management
function check_balance() {
  local issues=0
  
  # Check pattern count
  local pattern_count=0
  if [[ -f "$PATTERN_DB" ]]; then
    pattern_count=$(cat "$PATTERN_DB" | jq 'length')
  fi
  if ((pattern_count > 1000)); then
    log_harmony "Pattern database too large: $pattern_count patterns"
    ((issues++))
  fi
  
  # Check context count
  local context_count=0
  if [[ -f "$CONTEXT_CACHE" ]]; then
    context_count=$(cat "$CONTEXT_CACHE" | jq 'length')
  fi
  if ((context_count > 1000)); then
    log_harmony "Context cache too large: $context_count contexts"
    ((issues++))
  fi
  
  # Check session count
  local session_count=0
  if [[ -d "$SESSION_DIR" ]]; then
    session_count=$(ls -1 "$SESSION_DIR" | wc -l)
  fi
  if ((session_count > 100)); then
    log_harmony "Too many sessions: $session_count sessions"
    ((issues++))
  fi
  
  return $issues
}

function restore_balance() {
  # Trim pattern database
  if [[ -f "$PATTERN_DB" ]]; then
    cat "$PATTERN_DB" | jq 'to_entries | sort_by(.value.count) | reverse | .[0:1000] | from_entries' > "$PATTERN_DB.tmp"
    mv "$PATTERN_DB.tmp" "$PATTERN_DB"
    log_harmony "Pattern database trimmed"
  fi
  
  # Trim context cache
  if [[ -f "$CONTEXT_CACHE" ]]; then
    cat "$CONTEXT_CACHE" | jq 'to_entries | sort_by(.value.last_seen) | reverse | .[0:1000] | from_entries' > "$CONTEXT_CACHE.tmp"
    mv "$CONTEXT_CACHE.tmp" "$CONTEXT_CACHE"
    log_harmony "Context cache trimmed"
  fi
  
  # Trim sessions
  if [[ -d "$SESSION_DIR" ]]; then
    cd "$SESSION_DIR"
    ls -t | tail -n +101 | xargs rm -rf
    log_harmony "Old sessions removed"
  fi
}

# Main logic
case "$1" in
  --check)
    check_harmony
    check_integration
    check_balance
    ;;
  --restore)
    restore_harmony
    restore_integration
    restore_balance
    ;;
  --balance)
    restore_balance
    ;;
  --status)
    echo "Harmony status:"
    check_harmony
    echo "Integration status:"
    check_integration
    echo "Balance status:"
    check_balance
    ;;
  *)
    echo "Usage: $0 {--check|--restore|--balance|--status}"
    exit 1
    ;;
esac

exit 0 