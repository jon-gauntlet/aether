// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  role          String      @default("STUDENT")
  accounts      Account[]
  sessions      Session[]
  enrollments   Enrollment[]
  submissions   Submission[]
  feedback      Feedback[]
  notifications Notification[]
  collaborations UserCollaboration[]
  chatMessages  ChatMessage[]
  quizAttempts    QuizAttempt[]
  codeAttempts    CodeAttempt[]
  pollVotes       PollVote[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Course and Content Models
model Course {
  id          String       @id @default(cuid())
  title       String
  description String?
  modules     Module[]
  enrollments Enrollment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  mediaAttachments MediaAttachment[]
  analytics         CourseAnalytics?
}

model Module {
  id          String    @id @default(cuid())
  title       String
  description String?
  order       Int
  courseId    String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Lesson {
  id          String       @id @default(cuid())
  title       String
  content     String       @db.Text
  order       Int
  moduleId    String
  module      Module       @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  assignments Assignment[]
  progress    Progress[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  mediaAttachments     MediaAttachment[]
  collaborationSessions CollaborationSession[]
  quizzes           Quiz[]
  codePlaygrounds   CodePlayground[]
  polls             Poll[]
}

model Assignment {
  id          String       @id @default(cuid())
  title       String
  description String       @db.Text
  lessonId    String
  lesson      Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  submissions Submission[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// Enrollment and Progress Models
model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress  Progress[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Progress {
  id           String     @id @default(cuid())
  enrollmentId String
  lessonId     String
  completed    Boolean    @default(false)
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  lesson       Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Submission {
  id           String     @id @default(cuid())
  content      String     @db.Text
  userId       String
  assignmentId String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  feedback     Feedback[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Feedback {
  id            String     @id @default(cuid())
  content       String     @db.Text
  userId        String
  submissionId  String
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission    Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// Media Attachments
model MediaAttachment {
  id          String    @id @default(cuid())
  url         String
  type        String    // image, video, document, etc.
  title       String
  description String?
  size        Int
  courseId    String?
  lessonId    String?
  course      Course?   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lesson      Lesson?   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Notifications
model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  content   String
  type      String   // announcement, assignment, feedback, etc.
  read      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Course Metadata and Analytics
model CourseAnalytics {
  id              String   @id @default(cuid())
  courseId        String   @unique
  course          Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  totalEnrollments Int     @default(0)
  activeStudents  Int     @default(0)
  completionRate  Float   @default(0)
  averageRating   Float   @default(0)
  totalFeedback   Int     @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Real-time Collaboration
model CollaborationSession {
  id        String   @id @default(cuid())
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  active    Boolean  @default(true)
  participants UserCollaboration[]
  messages   ChatMessage[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserCollaboration {
  id        String   @id @default(cuid())
  userId    String
  sessionId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  session   CollaborationSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  status    String   @default("active") // active, idle, disconnected
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, sessionId])
}

model ChatMessage {
  id        String   @id @default(cuid())
  content   String
  userId    String
  sessionId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  session   CollaborationSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Enums
enum UserRole {
  ADMIN
  INSTRUCTOR
  STUDENT
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  DROPPED
}

// Interactive Content Models
model Quiz {
  id          String       @id @default(cuid())
  title       String
  description String?
  lessonId    String
  lesson      Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  questions   Question[]
  attempts    QuizAttempt[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Question {
  id          String       @id @default(cuid())
  content     String
  type        String      // multiple_choice, code, text
  options     Json?       // For multiple choice questions
  answer      String      // Correct answer or solution
  quizId      String
  quiz        Quiz        @relation(fields: [quizId], references: [id], onDelete: Cascade)
  attempts    QuestionAttempt[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model QuizAttempt {
  id          String       @id @default(cuid())
  userId      String
  quizId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz        Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers     QuestionAttempt[]
  score       Float?
  completed   Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model QuestionAttempt {
  id          String       @id @default(cuid())
  answer      String
  correct     Boolean
  questionId  String
  attemptId   String
  question    Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  attempt     QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model CodePlayground {
  id          String       @id @default(cuid())
  title       String
  description String?
  template    String       @db.Text
  solution    String       @db.Text
  tests       Json?        // Test cases
  language    String
  lessonId    String
  lesson      Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  attempts    CodeAttempt[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model CodeAttempt {
  id          String       @id @default(cuid())
  code        String       @db.Text
  passed      Boolean
  userId      String
  playgroundId String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  playground  CodePlayground @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Poll {
  id          String       @id @default(cuid())
  question    String
  options     Json
  lessonId    String
  lesson      Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  votes       PollVote[]
  active      Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model PollVote {
  id          String       @id @default(cuid())
  optionIndex Int
  userId      String
  pollId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  poll        Poll         @relation(fields: [pollId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([userId, pollId])
} 