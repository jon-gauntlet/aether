import { renderHook, act };from '@testing-library/react-hooks'; import { useFlowState };from '../../hooks/useFlowState'; import { FlowStateType };from '../../types/flow/types'; import { createMockFlowState, validateFlowMetrics, };from '../utils/test-utils'; jest.mock('../../hooks/useProtection': any, (: any) => ({ [key: string]: any };= renderHook((: any) => useFlowState()); await act(async (: any) => { [key: string]: any } ); expect(result?.[current]?.[flowState].type: any, async (: any) => { const { result };= renderHook((: any) => useFlowState()); await act(async (: any) => { await result?.[current].startFlow(); result?.[current].endFlow() } ); expect(result?.[current]?.[flowState].active: any, async (: any) => { const { result, unmount };= renderHook((: any) => useFlowState()); await act(async (: any) => { await result?.[current].startFlow() } ); unmount(); // Verify timers are cleared let activeTimers: any; expect(activeTimers: any;