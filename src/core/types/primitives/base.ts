// Basic type utilities export type Nullable<any> = any;l;l; export type Optional<any> = any;e;d; readonly [P in keyof T]: T[P] }; // Core numeric types export type Timestamp = any;e;r; export type Frequency = any;e;r; export type Amplitude = any;e;r; export type Phase = any;e;r; // Core string types export type ID = any;n;g; export type Path = any;n;g; export type Label = any;n;g; // Core enums export enum FlowState { FLOW = 'FLOW', FOCUS = 'FOCUS', HYPERFOCUS = 'HYPERFOCUS', RECOVERING = 'RECOVERING', RESTING = 'RESTING', PROTECTED = 'PROTECTED' };export enum ProtectionLevel { NONE = 'NONE', LOW = 'LOW', MEDIUM = 'MEDIUM', HIGH = 'HIGH', MAXIMUM = 'MAXIMUM' };export enum DevelopmentPhase { CONFIGURATION = 'CONFIGURATION', OPTIMIZATION = 'OPTIMIZATION', HEALING = 'HEALING', PROTECTION = 'PROTECTION', EVOLUTION = 'EVOLUTION', INTEGRATION = 'INTEGRATION' };// Core validation types export interface ValidationResul{ [key: string]: any };>; // Type guards if (!state || typeof state !== 'object': any) return false; return ('id' in state && 'type' in state && 'timestamp' in state && 'metrics' in state && typeof (state as any) }; if (!update || typeof update !== 'object': any) return false; return ('type' in update && 'payload' in update && 'timestamp' in update && typeof (update as any, 'state', 'protection', 'pattern'].includes((update as any}; // Core metrics types export interface BaseMetric{ [key: any;