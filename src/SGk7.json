{
    "version": "0.9.2",
    "created_at": "2024-12-27 20:44:49 -0800",
    "results": [
        {
            "type": "unpatched_gem",
            "gem": {
                "name": "actionmailer",
                "version": "7.1.3.4"
            },
            "advisory": {
                "path": "/home/jon/.local/share/ruby-advisory-db/gems/actionmailer/CVE-2024-47889.yml",
                "id": "CVE-2024-47889",
                "url": "https://github.com/rails/rails/security/advisories/GHSA-h47h-mwp9-c6q6",
                "title": "Possible ReDoS vulnerability in block_format in Action Mailer",
                "date": "2024-10-15",
                "description": "There is a possible ReDoS vulnerability in the block_format helper\nin Action Mailer. This vulnerability has been assigned the\nCVE identifier CVE-2024-47889.\n\n## Impact\n\nCarefully crafted text can cause the block_format helper to take an\nunexpected amount of time, possibly resulting in a DoS vulnerability.\nAll users running an affected release should either upgrade or apply\nthe relevant patch immediately.\n\nRuby 3.2 has mitigations for this problem, so Rails applications\nusing Ruby 3.2 or newer are unaffected. Rails 8.0.0.beta1 requires\nRuby 3.2 or greater so is unaffected.\n\n## Releases\n\nThe fixed releases are available at the normal locations.\n\n## Workarounds\n\nUsers can avoid calling the `block_format` helper or upgrade\nto Ruby 3.2.\n\n##Credits\n\nThanks to [ooooooo_q](https://hackerone.com/ooooooo_q) for the report!\n",
                "cvss_v2": null,
                "cvss_v3": null,
                "cve": "2024-47889",
                "osvdb": null,
                "ghsa": "h47h-mwp9-c6q6",
                "unaffected_versions": [
                    "< 3.0.0"
                ],
                "patched_versions": [
                    "~> 6.1.7.9",
                    "~> 7.0.8.5",
                    "~> 7.1.4, >= 7.1.4.1",
                    ">= 7.2.1.1"
                ],
                "criticality": null
            }
        },
        {
            "type": "unpatched_gem",
            "gem": {
                "name": "actionpack",
                "version": "7.1.3.4"
            },
            "advisory": {
                "path": "/home/jon/.local/share/ruby-advisory-db/gems/actionpack/CVE-2024-41128.yml",
                "id": "CVE-2024-41128",
                "url": "https://github.com/rails/rails/security/advisories/GHSA-x76w-6vjr-8xgj",
                "title": "Possible ReDoS vulnerability in query parameter filtering in Action Dispatch",
                "date": "2024-10-15",
                "description": "There is a possible ReDoS vulnerability in the query parameter\nfiltering routines of Action Dispatch. This vulnerability has\nbeen assigned the CVE identifier CVE-2024-41128.\n\n## Impact\n\nCarefully crafted query parameters can cause query parameter\nfiltering to take an unexpected amount of time, possibly resulting\nin a DoS vulnerability. All users running an affected release\nshould either upgrade or apply the relevant patch immediately.\n\nRuby 3.2 has mitigations for this problem, so Rails applications\nusing Ruby 3.2 or newer are unaffected. Rails 8.0.0.beta1 depends\non Ruby 3.2 or greater so is unaffected.\n\n## Releases\n\nThe fixed releases are available at the normal locations.\n\n## Workarounds\n\nUsers on Ruby 3.2 are unaffected by this issue.\n\n## Credits\n\nThanks to [scyoon](https://hackerone.com/scyoon) for the report and patches!\n",
                "cvss_v2": null,
                "cvss_v3": null,
                "cve": "2024-41128",
                "osvdb": null,
                "ghsa": "x76w-6vjr-8xgj",
                "unaffected_versions": [
                    "< 3.1.0"
                ],
                "patched_versions": [
                    "~> 6.1.7.9",
                    "~> 7.0.8.5",
                    "~> 7.1.4, >= 7.1.4.1",
                    ">= 7.2.1.1"
                ],
                "criticality": null
            }
        },
        {
            "type": "unpatched_gem",
            "gem": {
                "name": "actionpack",
                "version": "7.1.3.4"
            },
            "advisory": {
                "path": "/home/jon/.local/share/ruby-advisory-db/gems/actionpack/CVE-2024-47887.yml",
                "id": "CVE-2024-47887",
                "url": "https://github.com/rails/rails/security/advisories/GHSA-vfg9-r3fq-jvx4",
                "title": "Possible ReDoS vulnerability in HTTP Token authentication in Action Controller",
                "date": "2024-10-15",
                "description": "There is a possible ReDoS vulnerability in Action Controller's\nHTTP Token authentication. This vulnerability has been assigned\nthe CVE identifier CVE-2024-47887.\n\n## Impact\n\nFor applications using HTTP Token authentication via\n`authenticate_or_request_with_http_token` or similar, a carefully\ncrafted header may cause header parsing to take an unexpected amount\nof time, possibly resulting in a DoS vulnerability. All users running\nan affected release should either upgrade or apply the relevant\npatch immediately.\n\nRuby 3.2 has mitigations for this problem, so Rails applications\nusing Ruby 3.2 or newer are unaffected. Rails 8.0.0.beta1 depends\non Ruby 3.2 or greater so is unaffected.\n\n## Releases\n\nThe fixed releases are available at the normal locations.\n\n## Workarounds\n\nUsers on Ruby 3.2 are unaffected by this issue.\n\n## Credits\n\nThanks to [scyoon](https://hackerone.com/scyoon) for reporting\n",
                "cvss_v2": null,
                "cvss_v3": null,
                "cve": "2024-47887",
                "osvdb": null,
                "ghsa": "vfg9-r3fq-jvx4",
                "unaffected_versions": [
                    "< 4.0.0"
                ],
                "patched_versions": [
                    "~> 6.1.7.9",
                    "~> 7.0.8.5",
                    "~> 7.1.4, >= 7.1.4.1",
                    ">= 7.2.1.1"
                ],
                "criticality": null
            }
        },
        {
            "type": "unpatched_gem",
            "gem": {
                "name": "actionpack",
                "version": "7.1.3.4"
            },
            "advisory": {
                "path": "/home/jon/.local/share/ruby-advisory-db/gems/actionpack/CVE-2024-54133.yml",
                "id": "CVE-2024-54133",
                "url": "https://github.com/rails/rails/security/advisories/GHSA-vfm5-rmrh-j26v",
                "title": "Possible Content Security Policy bypass in Action Dispatch",
                "date": "2024-12-10",
                "description": "There is a possible Cross Site Scripting (XSS) vulnerability\nin the `content_security_policy` helper in Action Pack.\n\n## Impact\n\nApplications which set Content-Security-Policy (CSP) headers\ndynamically from untrusted user input may be vulnerable to\ncarefully crafted inputs being able to inject new directives\ninto the CSP. This could lead to a bypass of the CSP and its\nprotection against XSS and other attacks.\n\n## Releases\n\nThe fixed releases are available at the normal locations.\n\n## Workarounds\n\nApplications can avoid setting CSP headers dynamically from\nuntrusted input, or can validate/sanitize that input.\n\n## Credits\n\nThanks to [ryotak](https://hackerone.com/ryotak) for the report!\n",
                "cvss_v2": null,
                "cvss_v3": null,
                "cve": "2024-54133",
                "osvdb": null,
                "ghsa": "vfm5-rmrh-j26v",
                "unaffected_versions": [
                    "< 5.2.0"
                ],
                "patched_versions": [
                    "~> 7.0.8.7",
                    "~> 7.1.5.1",
                    "~> 7.2.2.1",
                    ">= 8.0.0.1"
                ],
                "criticality": null
            }
        },
        {
            "type": "unpatched_gem",
            "gem": {
                "name": "actiontext",
                "version": "7.1.3.4"
            },
            "advisory": {
                "path": "/home/jon/.local/share/ruby-advisory-db/gems/actiontext/CVE-2024-47888.yml",
                "id": "CVE-2024-47888",
                "url": "https://github.com/rails/rails/security/advisories/GHSA-wwhv-wxv9-rpgw",
                "title": "Possible ReDoS vulnerability in plain_text_for_blockquote_node in Action Text",
                "date": "2024-10-15",
                "description": "There is a possible ReDoS vulnerability in the\nplain_text_for_blockquote_node helper in Action Text. This\nvulnerability has been assigned the CVE identifier CVE-2024-47888.\n\n## Impact\n\nCarefully crafted text can cause the plain_text_for_blockquote_node\nhelper to take an unexpected amount of time, possibly resulting\nin a DoS vulnerability. All users running an affected release should\neither upgrade or apply the relevant patch immediately.\n\nRuby 3.2 has mitigations for this problem, so Rails applications\nusing Ruby 3.2 or newer are unaffected. Rails 8.0.0.beta1 depends\non Ruby 3.2 or greater so is unaffected.\n\n## Releases\n\nThe fixed releases are available at the normal locations.\n\n## Workarounds\n\nUsers can avoid calling `plain_text_for_blockquote_node` or\nupgrade to Ruby 3.2.\n\n## Credits\n\nThanks to [ooooooo_q](https://hackerone.com/ooooooo_q) for the report!\n",
                "cvss_v2": null,
                "cvss_v3": null,
                "cve": "2024-47888",
                "osvdb": null,
                "ghsa": "wwhv-wxv9-rpgw",
                "unaffected_versions": [
                    "< 6.0.0"
                ],
                "patched_versions": [
                    "~> 6.1.7.9",
                    "~> 7.0.8.5",
                    "~> 7.1.4, >= 7.1.4.1",
                    ">= 7.2.1.1"
                ],
                "criticality": null
            }
        },
        {
            "type": "unpatched_gem",
            "gem": {
                "name": "google-protobuf",
                "version": "4.27.0"
            },
            "advisory": {
                "path": "/home/jon/.local/share/ruby-advisory-db/gems/google-protobuf/CVE-2024-7254.yml",
                "id": "CVE-2024-7254",
                "url": "https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-735f-pc8j-v9w8",
                "title": "protobuf-java has potential Denial of Service issue",
                "date": "2024-09-19",
                "description": "### Summary\nWhen parsing unknown fields in the Protobuf Java Lite and Full library,\na maliciously crafted message can cause a StackOverflow error and lead\nto a program crash.\n\nReporter: Alexis Challande, Trail of Bits Ecosystem Security\nTeam <ecosystem@trailofbits.com>\n\nAffected versions: This issue affects all versions of both the Java\nfull and lite Protobuf runtimes, as well as Protobuf for Kotlin and\nJRuby, which themselves use the Java Protobuf runtime.\n\n### Severity\n[CVE-2024-7254](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-7254)\n**High** CVSS4.0 Score 8.7 (NOTE: there may be a delay in publication)\n\nThis is a potential Denial of Service. Parsing nested groups as unknown\nfields with DiscardUnknownFieldsParser or Java Protobuf Lite parser,\nor against Protobuf map fields, creates unbounded recursions that can\nbe abused by an attacker.\n\n### Proof of Concept\nFor reproduction details, please refer to the unit tests (Protobuf Java\n[LiteTest](https://github.com/protocolbuffers/protobuf/blob/a037f28ff81ee45ebe008c64ab632bf5372242ce/java/lite/src/test/java/com/google/protobuf/LiteTest.java)\nand [CodedInputStreamTest](https://github.com/protocolbuffers/protobuf/blob/a037f28ff81ee45ebe008c64ab632bf5372242ce/java/core/src/test/java/com/google/protobuf/CodedInputStreamTest.java))\nthat identify the specific inputs that exercise this parsing weakness.\n\n### Remediation and Mitigation\nWe have been working diligently to address this issue and have released\na mitigation that is available now. Please update to the latest\navailable versions of the following packages:\n\n* protobuf-java (3.25.5, 4.27.5, 4.28.2)\n* protobuf-javalite (3.25.5, 4.27.5, 4.28.2)\n* protobuf-kotlin (3.25.5, 4.27.5, 4.28.2)\n* protobuf-kotlin-lite (3.25.5, 4.27.5, 4.28.2)\n* com-protobuf [JRuby gem only] (3.25.5, 4.27.5, 4.28.2)\n\n",
                "cvss_v2": null,
                "cvss_v3": 7.5,
                "cve": "2024-7254",
                "osvdb": null,
                "ghsa": "735f-pc8j-v9w8",
                "unaffected_versions": [],
                "patched_versions": [
                    "~> 3.25.5",
                    "~> 4.27.5",
                    ">= 4.28.2"
                ],
                "criticality": "high"
            }
        },
        {
            "type": "unpatched_gem",
            "gem": {
                "name": "google-protobuf",
                "version": "4.27.0"
            },
            "advisory": {
                "path": "/home/jon/.local/share/ruby-advisory-db/gems/google-protobuf/CVE-2024-7254.yml",
                "id": "CVE-2024-7254",
                "url": "https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-735f-pc8j-v9w8",
                "title": "protobuf-java has potential Denial of Service issue",
                "date": "2024-09-19",
                "description": "### Summary\nWhen parsing unknown fields in the Protobuf Java Lite and Full library,\na maliciously crafted message can cause a StackOverflow error and lead\nto a program crash.\n\nReporter: Alexis Challande, Trail of Bits Ecosystem Security\nTeam <ecosystem@trailofbits.com>\n\nAffected versions: This issue affects all versions of both the Java\nfull and lite Protobuf runtimes, as well as Protobuf for Kotlin and\nJRuby, which themselves use the Java Protobuf runtime.\n\n### Severity\n[CVE-2024-7254](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-7254)\n**High** CVSS4.0 Score 8.7 (NOTE: there may be a delay in publication)\n\nThis is a potential Denial of Service. Parsing nested groups as unknown\nfields with DiscardUnknownFieldsParser or Java Protobuf Lite parser,\nor against Protobuf map fields, creates unbounded recursions that can\nbe abused by an attacker.\n\n### Proof of Concept\nFor reproduction details, please refer to the unit tests (Protobuf Java\n[LiteTest](https://github.com/protocolbuffers/protobuf/blob/a037f28ff81ee45ebe008c64ab632bf5372242ce/java/lite/src/test/java/com/google/protobuf/LiteTest.java)\nand [CodedInputStreamTest](https://github.com/protocolbuffers/protobuf/blob/a037f28ff81ee45ebe008c64ab632bf5372242ce/java/core/src/test/java/com/google/protobuf/CodedInputStreamTest.java))\nthat identify the specific inputs that exercise this parsing weakness.\n\n### Remediation and Mitigation\nWe have been working diligently to address this issue and have released\na mitigation that is available now. Please update to the latest\navailable versions of the following packages:\n\n* protobuf-java (3.25.5, 4.27.5, 4.28.2)\n* protobuf-javalite (3.25.5, 4.27.5, 4.28.2)\n* protobuf-kotlin (3.25.5, 4.27.5, 4.28.2)\n* protobuf-kotlin-lite (3.25.5, 4.27.5, 4.28.2)\n* com-protobuf [JRuby gem only] (3.25.5, 4.27.5, 4.28.2)\n\n",
                "cvss_v2": null,
                "cvss_v3": 7.5,
                "cve": "2024-7254",
                "osvdb": null,
                "ghsa": "735f-pc8j-v9w8",
                "unaffected_versions": [],
                "patched_versions": [
                    "~> 3.25.5",
                    "~> 4.27.5",
                    ">= 4.28.2"
                ],
                "criticality": "high"
            }
        },
        {
            "type": "unpatched_gem",
            "gem": {
                "name": "puma",
                "version": "6.4.2"
            },
            "advisory": {
                "path": "/home/jon/.local/share/ruby-advisory-db/gems/puma/CVE-2024-45614.yml",
                "id": "CVE-2024-45614",
                "url": "https://github.com/puma/puma/security/advisories/GHSA-9hf4-67fc-4vf4",
                "title": "Puma's header normalization allows for client to clobber proxy set headers",
                "date": "2024-09-20",
                "description": "### Impact\n\nClients could clobber values set by intermediate proxies (such as\nX-Forwarded-For) by providing a underscore version of the same\nheader (X-Forwarded_For).\n\nAny users trusting headers set by their proxy may be affected.\nAttackers may be able to downgrade connections to HTTP (non-SSL)\nor redirect responses, which could cause confidentiality leaks\nif combined with a separate MITM attack.\n\n### Patches\nv6.4.3/v5.6.9 now discards any headers using underscores if the\nnon-underscore version also exists.  Effectively, allowing the\nproxy defined headers to always win.\n\n### Workarounds\nNginx has a [underscores_in_headers](https://nginx.org/en/docs/http/ngx_http_core_module.html#underscores_in_headers)\nconfiguration variable to discard these headers at the proxy level.\n\nAny users that are implicitly trusting the proxy defined headers\nfor security or availability should immediately cease doing so\nuntil upgraded to the fixed versions.\n",
                "cvss_v2": null,
                "cvss_v3": 5.4,
                "cve": "2024-45614",
                "osvdb": null,
                "ghsa": "9hf4-67fc-4vf4",
                "unaffected_versions": [],
                "patched_versions": [
                    "~> 5.6.9",
                    ">= 6.4.3"
                ],
                "criticality": "medium"
            }
        },
        {
            "type": "unpatched_gem",
            "gem": {
                "name": "rails-html-sanitizer",
                "version": "1.6.0"
            },
            "advisory": {
                "path": "/home/jon/.local/share/ruby-advisory-db/gems/rails-html-sanitizer/CVE-2024-53985.yml",
                "id": "CVE-2024-53985",
                "url": "https://github.com/rails/rails-html-sanitizer/security/advisories/GHSA-w8gc-x259-rc7x",
                "title": "rails-html-sanitizer has XSS vulnerability with certain configurations",
                "date": "2024-12-02",
                "description": "## Summary\n\nThere is a possible XSS vulnerability with certain configurations of\nRails::HTML::Sanitizer 1.6.0 when used with Rails >= 7.1.0 and\nNokogiri < 1.15.7, or 1.16.x < 1.16.8.\n\n* Versions affected: 1.6.0\n* Not affected: < 1.6.0\n* Fixed versions: 1.6.1\n\nPlease note that the fix in v1.6.1 is to update the dependency on\nNokogiri to 1.15.7 or >= 1.16.8.\n\n## Impact\n\nA possible XSS vulnerability with certain configurations of\nRails::HTML::Sanitizer may allow an attacker to inject content if\nHTML5 sanitization is enabled and the application developer has\noverridden the sanitizer's allowed tags in either of the following ways:\n\n* allow both \"math\" and \"style\" elements\n* or allow both \"svg\" and \"style\" elements\n\nCode is only impacted if Rails is configured to use HTML5 sanitization,\nplease see documentation for\n[`config.action_view.sanitizer_vendor`](https://guides.rubyonrails.org/configuring.html#config-action-view-sanitizer-vendor)\nand [`config.action_text.sanitizer_vendor`](https://guides.rubyonrails.org/configuring.html#config-action-text-sanitizer-vendor)\nfor more information on these configuration options.\n\nCode is only impacted if allowed tags are being overridden.\nApplications may be doing this in a few different ways:\n\n1. using application configuration to configure Action View\n   sanitizers' allowed tags:\n\n  ```ruby\n  # In config/application.rb\n  config.action_view.sanitized_allowed_tags = [\"math\", \"style\"]\n  # or\n  config.action_view.sanitized_allowed_tags = [\"svg\", \"style\"]\n  ```\n\n  see https://guides.rubyonrails.org/configuring.html#configuring-action-view\n\n2. using a `:tags` option to the Action View helper `sanitize`:\n\n  ```\n  <= sanitize @comment.body, tags: [\"math\", \"style\"] >\n  <# or>\n  <= sanitize @comment.body, tags: [\"svg\", \"style\"] >\n  ```\n\n  see https://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize\n\n3. setting Rails::HTML5::SafeListSanitizer class attribute `allowed_tags`:\n\n  ```ruby\n  # class-level option\n  Rails::HTML5::SafeListSanitizer.allowed_tags = [\"math\", \"style\"]\n  # or\n  Rails::HTML5::SafeListSanitizer.allowed_tags = [\"svg\", \"style\"]\n  ```\n\n  (note that this class may also be referenced as\n  `Rails::Html::SafeListSanitizer`)\n\n4. using a `:tags` options to the Rails::HTML5::SafeListSanitizer\n   instance method `sanitize`:\n\n  ```ruby\n  # instance-level option\n  Rails::HTML5::SafeListSanitizer.new.sanitize(@article.body, tags: [\"math\", \"style\"])\n  # or\n  Rails::HTML5::SafeListSanitizer.new.sanitize(@article.body, tags: [\"svg\", \"style\"])\n  ```\n  (note that this class may also be referenced as `Rails::Html::SafeListSanitizer`)\n\n5. setting ActionText::ContentHelper module attribute `allowed_tags`:\n\n  ```ruby\n  ActionText::ContentHelper.allowed_tags = [\"math\", \"style\"]\n  # or\n  ActionText::ContentHelper.allowed_tags = [\"svg\", \"style\"]\n  ```\n\nAll users overriding the allowed tags by any of the above mechanisms\nto include ((\"math\" or \"svg\") and \"style\") should either upgrade or\nuse one of the workarounds.\n\n## Workarounds\n\nAny one of the following actions will work around this issue:\n\n- Remove \"style\" from the overridden allowed tags,\n- Or, remove \"math\" and \"svg\" from the overridden allowed tags,\n- Or, downgrade sanitization to HTML4 (see documentation for\n  [`config.action_view.sanitizer_vendor`](https://guides.rubyonrails.org/configuring.html#config-action-view-sanitizer-vendor)\n  and [`config.action_text.sanitizer_vendor`](https://guides.rubyonrails.org/configuring.html#config-action-text-sanitizer-vendor)\n  for more information)\n- Or, independently upgrade Nokogiri to v1.15.7 or >= 1.16.8.\n\n## References\n\n- [CWE - CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') (4.9)](https://cwe.mitre.org/data/definitions/79.html)\n- Original report: https://hackerone.com/reports/2503220\n\n## Credit\n\nThis vulnerability was responsibly reported by HackerOne user\n[@taise](https://hackerone.com/taise?type=user).\n",
                "cvss_v2": null,
                "cvss_v3": null,
                "cve": "2024-53985",
                "osvdb": null,
                "ghsa": "w8gc-x259-rc7x",
                "unaffected_versions": [
                    "< 1.6.0"
                ],
                "patched_versions": [
                    ">= 1.6.1"
                ],
                "criticality": null
            }
        },
        {
            "type": "unpatched_gem",
            "gem": {
                "name": "rails-html-sanitizer",
                "version": "1.6.0"
            },
            "advisory": {
                "path": "/home/jon/.local/share/ruby-advisory-db/gems/rails-html-sanitizer/CVE-2024-53986.yml",
                "id": "CVE-2024-53986",
                "url": "https://github.com/rails/rails-html-sanitizer/security/advisories/GHSA-638j-pmjw-jq48",
                "title": "rails-html-sanitizer has XSS vulnerability with certain configurations",
                "date": "2024-12-02",
                "description": "## Summary\n\nThere is a possible XSS vulnerability with certain configurations of\nRails::HTML::Sanitizer 1.6.0 when used with Rails >= 7.1.0.\n\n* Versions affected: 1.6.0\n* Not affected: < 1.6.0\n* Fixed versions: 1.6.1\n\n## Impact\n\nA possible XSS vulnerability with certain configurations of\nRails::HTML::Sanitizer may allow an attacker to inject content if\nHTML5 sanitization is enabled and the application developer has\noverridden the sanitizer's allowed tags in the following way:\n\n- the \"math\" and \"style\" elements are both explicitly allowed\n\nCode is only impacted if Rails is configured to use HTML5 sanitization,\nplease see documentation for\n[`config.action_view.sanitizer_vendor`](https://guides.rubyonrails.org/configuring.html#config-action-view-sanitizer-vendor)\nand [`config.action_text.sanitizer_vendor`](https://guides.rubyonrails.org/configuring.html#config-action-text-sanitizer-vendor)\nfor more information on these configuration options.\n\nThe default configuration is to disallow these elements. Code is only\nimpacted if allowed tags are being overridden. Applications may be\ndoing this in a few different ways:\n\n1. using application configuration to configure Action View sanitizers'\n   allowed tags:\n\n  ```ruby\n  # In config/application.rb\n  config.action_view.sanitized_allowed_tags = [\"math\", \"style\"]\n  ```\n\n  see https://guides.rubyonrails.org/configuring.html#configuring-action-view\n\n2. using a `:tags` option to the Action View helper `sanitize`:\n\n  ```\n  <= sanitize @comment.body, tags: [\"math\", \"style\"]>\n  ```\n\n  see https://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize\n\n3. setting Rails::HTML5::SafeListSanitizer class attribute `allowed_tags`:\n\n  ```ruby\n  # class-level option\n  Rails::HTML5::SafeListSanitizer.allowed_tags = [\"math\", \"style\"]\n  ```\n\n  (note that this class may also be referenced as\n  `Rails::Html::SafeListSanitizer`)\n\n4. using a `:tags` options to the Rails::HTML5::SafeListSanitizer\n   instance method `sanitize`:\n\n  ```ruby\n  # instance-level option\n  Rails::HTML5::SafeListSanitizer.new.sanitize(@article.body, tags: [\"math\", \"style\"])\n  ```\n\n  (note that this class may also be referenced as\n   `Rails::Html::SafeListSanitizer`)\n\n5. setting ActionText::ContentHelper module attribute `allowed_tags`:\n\n  ```ruby\n  ActionText::ContentHelper.allowed_tags = [\"math\", \"style\"]\n  ```\n\nAll users overriding the allowed tags by any of the above mechanisms\nto include both \"math\" and \"style\" should either upgrade or use one\nof the workarounds.\n\n## Workarounds\n\nAny one of the following actions will work around this issue:\n\n- Remove \"math\" or \"style\" from the overridden allowed tags,\n- Or, downgrade sanitization to HTML4 (see documentation for\n  [`config.action_view.sanitizer_vendor`](https://guides.rubyonrails.org/configuring.html#config-action-view-sanitizer-vendor)\n  and [`config.action_text.sanitizer_vendor`](https://guides.rubyonrails.org/configuring.html#config-action-text-sanitizer-vendor)\n  for more information).\n\n## References\n\n- [CWE - CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') (4.9)](https://cwe.mitre.org/data/definitions/79.html)\n- Original report: https://hackerone.com/reports/2519941\n\n## Credit\n\nThis vulnerability was responsibly reported by So Sakaguchi (mokusou).\n",
                "cvss_v2": null,
                "cvss_v3": null,
                "cve": "2024-53986",
                "osvdb": null,
                "ghsa": "638j-pmjw-jq48",
                "unaffected_versions": [
                    "< 1.6.0"
                ],
                "patched_versions": [
                    ">= 1.6.1"
                ],
                "criticality": null
            }
        },
        {
            "type": "unpatched_gem",
            "gem": {
                "name": "rails-html-sanitizer",
                "version": "1.6.0"
            },
            "advisory": {
                "path": "/home/jon/.local/share/ruby-advisory-db/gems/rails-html-sanitizer/CVE-2024-53987.yml",
                "id": "CVE-2024-53987",
                "url": "https://github.com/rails/rails-html-sanitizer/security/advisories/GHSA-2x5m-9ch4-qgrr",
                "title": "rails-html-sanitizer has XSS vulnerability with certain configurations",
                "date": "2024-12-02",
                "description": "## Summary\n\nThere is a possible XSS vulnerability with certain configurations of\nRails::HTML::Sanitizer 1.6.0 when used with Rails >= 7.1.0.\n\n* Versions affected: 1.6.0\n* Not affected: < 1.6.0\n* Fixed versions: 1.6.1\n\n## Impact\n\nA possible XSS vulnerability with certain configurations of\nRails::HTML::Sanitizer may allow an attacker to inject content if\nHTML5 sanitization is enabled and the application developer has\noverridden the sanitizer's allowed tags in the following way:\n\n- the \"style\" element is explicitly allowed\n- the \"svg\" or \"math\" element is not allowed\n\nCode is only impacted if Rails is configured to use HTML5 sanitization,\nplease see documentation for [`config.action_view.sanitizer_vendor`](https://guides.rubyonrails.org/configuring.html#config-action-view-sanitizer-vendor)\nand [`config.action_text.sanitizer_vendor`](https://guides.rubyonrails.org/configuring.html#config-action-text-sanitizer-vendor)\nfor more information on these configuration options.\n\nThe default configuration is to disallow all of these elements. Code\nis only impacted if allowed tags are being overridden. Applications\nmay be doing this in a few different ways:\n\n1. using application configuration to configure Action View sanitizers'\n   allowed tags:\n\n  ```ruby\n  # In config/application.rb\n  config.action_view.sanitized_allowed_tags = [\"style\"]\n  ```\n\n  see https://guides.rubyonrails.org/configuring.html#configuring-action-view\n\n2. using a `:tags` option to the Action View helper `sanitize`:\n\n  ```\n  <= sanitize @comment.body, tags: [\"style\"] >\n  ```\n\n  see https://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize\n\n3. setting Rails::HTML5::SafeListSanitizer class attribute `allowed_tags`:\n\n  ```ruby\n  # class-level option\n  Rails::HTML5::SafeListSanitizer.allowed_tags = [\"style\"]\n  ```\n\n  (note that this class may also be referenced as\n  `Rails::Html::SafeListSanitizer`)\n\n4. using a `:tags` options to the Rails::HTML5::SafeListSanitizer instance method `sanitize`:\n\n  ```ruby\n  # instance-level option\n  Rails::HTML5::SafeListSanitizer.new.sanitize(@article.body, tags: [\"style\"])\n  ```\n\n  (note that this class may also be referenced as\n  `Rails::Html::SafeListSanitizer`)\n\n5. setting ActionText::ContentHelper module attribute `allowed_tags`:\n\n  ```ruby\n  ActionText::ContentHelper.allowed_tags = [\"style\"]\n  ```\n\nAll users overriding the allowed tags by any of the above mechanisms\nto include \"style\" and omit \"svg\" or \"math\" should either upgrade\nor use one of the workarounds.\n\n## Workarounds\n\nAny one of the following actions will work around this issue:\n\n- Remove \"style\" from the overridden allowed tags,\n- Or, downgrade sanitization to HTML4 (see documentation for\n  [`config.action_view.sanitizer_vendor`](https://guides.rubyonrails.org/configuring.html#config-action-view-sanitizer-vendor)\n  and [`config.action_text.sanitizer_vendor`](https://guides.rubyonrails.org/configuring.html#config-action-text-sanitizer-vendor)\n  for more information).\n\n## References\n\n- [CWE - CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') (4.9)](https://cwe.mitre.org/data/definitions/79.html)\n- Original report: https://hackerone.com/reports/2519936\n\n## Credit\n\nThis vulnerability was responsibly reported by So Sakaguchi (mnokusou).\n",
                "cvss_v2": null,
                "cvss_v3": null,
                "cve": "2024-53987",
                "osvdb": null,
                "ghsa": "2x5m-9ch4-qgrr",
                "unaffected_versions": [
                    "< 1.6.0"
                ],
                "patched_versions": [
                    ">= 1.6.1"
                ],
                "criticality": null
            }
        },
        {
            "type": "unpatched_gem",
            "gem": {
                "name": "rails-html-sanitizer",
                "version": "1.6.0"
            },
            "advisory": {
                "path": "/home/jon/.local/share/ruby-advisory-db/gems/rails-html-sanitizer/CVE-2024-53988.yml",
                "id": "CVE-2024-53988",
                "url": "https://github.com/rails/rails-html-sanitizer/security/advisories/GHSA-cfjx-w229-hgx5",
                "title": "rails-html-sanitizer has XSS vulnerability with certain configurations",
                "date": "2024-12-02",
                "description": "## Summary\n\nThere is a possible XSS vulnerability with certain configurations of\nRails::HTML::Sanitizer 1.6.0 when used with Rails >= 7.1.0.\n\n* Versions affected: 1.6.0\n* Not affected: < 1.6.0\n* Fixed versions: 1.6.1\n\n## Impact\n\nA possible XSS vulnerability with certain configurations of\nRails::HTML::Sanitizer may allow an attacker to inject content\nif HTML5 sanitization is enabled and the application developer\nhas overridden the sanitizer's allowed tags in the following way:\n\n- the \"math\", \"mtext\", \"table\", and \"style\" elements are allowed\n- and either \"mglyph\" or \"malignmark\" are allowed\n\nCode is only impacted if Rails is configured to use HTML5 sanitization,\nplease see documentation for [`config.action_view.sanitizer_vendor`](https://guides.rubyonrails.org/configuring.html#config-action-view-sanitizer-vendor)\nand [`config.action_text.sanitizer_vendor`](https://guides.rubyonrails.org/configuring.html#config-action-text-sanitizer-vendor)\nfor more information on these configuration options.\n\nThe default configuration is to disallow all of these elements\nexcept for \"table\". Code is only impacted if allowed tags are being\noverridden. Applications may be doing this in a few different ways:\n\n1. using application configuration to configure Action View sanitizers'\n   allowed tags:\n\n  ```ruby\n  # In config/application.rb\n  config.action_view.sanitized_allowed_tags = [\"math\", \"mtext\", \"table\", \"style\", \"mglyph\"]\n  # or\n  config.action_view.sanitized_allowed_tags = [\"math\", \"mtext\", \"table\", \"style\", \"malignmark\"]\n  ```\n\n  see https://guides.rubyonrails.org/configuring.html#configuring-action-view\n\n2. using a `:tags` option to the Action View helper `sanitize`:\n\n  ```\n  <= sanitize @comment.body, tags: [\"math\", \"mtext\", \"table\", \"style\", \"mglyph\"] >\n  <# or >\n  <= sanitize @comment.body, tags: [\"math\", \"mtext\", \"table\", \"style\", \"malignmark\"] >\n  ```\n\n  see https://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize\n\n3. setting Rails::HTML5::SafeListSanitizer class attribute `allowed_tags`:\n\n  ```ruby\n  # class-level option\n  Rails::HTML5::SafeListSanitizer.allowed_tags = [\"math\", \"mtext\", \"table\", \"style\", \"mglyph\"]\n  # or\n  Rails::HTML5::SafeListSanitizer.allowed_tags = [\"math\", \"mtext\", \"table\", \"style\", \"malignmark\"]\n  ```\n\n  (note that this class may also be referenced as\n  `Rails::Html::SafeListSanitizer`)\n\n4. using a `:tags` options to the Rails::HTML5::SafeListSanitizer\n   instance method `sanitize`:\n\n  ```ruby\n  # instance-level option\n  Rails::HTML5::SafeListSanitizer.new.sanitize(@article.body, tags: [\"math\", \"mtext\", \"table\", \"style\", \"mglyph\"])\n  # or\n  Rails::HTML5::SafeListSanitizer.new.sanitize(@article.body, tags: [\"math\", \"mtext\", \"table\", \"style\", \"malignmark\"])\n  ```\n\n  (note that this class may also be referenced as\n  `Rails::Html::SafeListSanitizer`)\n\n5. setting ActionText::ContentHelper module attribute `allowed_tags`:\n\n  ```ruby\n  ActionText::ContentHelper.allowed_tags = [\"math\", \"mtext\", \"table\", \"style\", \"mglyph\"]\n  # or\n  ActionText::ContentHelper.allowed_tags = [\"math\", \"mtext\", \"table\", \"style\", \"malignmark\"]\n  ```\n\nAll users overriding the allowed tags by any of the above mechanisms\nto include (\"math\" and \"mtext\" and \"table\" and \"style\" and (\"mglyph\"\nor \"malignmark\")) should either upgrade or use one of the workarounds.\n\n## Workarounds\n\nAny one of the following actions will work around this issue:\n\n- Remove \"mglyph\" and \"malignmark\" from the overridden allowed tags,\n- Or, downgrade sanitization to HTML4 (see documentation for [`config.action_view.sanitizer_vendor`](https://guides.rubyonrails.org/configuring.html#config-action-view-sanitizer-vendor)\n  and [`config.action_text.sanitizer_vendor`](https://guides.rubyonrails.org/configuring.html#config-action-text-sanitizer-vendor)\n  for more information).\n\n## References\n\n- [CWE - CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') (4.9)](https://cwe.mitre.org/data/definitions/79.html)\n- Original report: https://hackerone.com/reports/2519936\n\n## Credit\n\nThis vulnerability was responsibly reported by So Sakaguchi (mokusou).\n",
                "cvss_v2": null,
                "cvss_v3": null,
                "cve": "2024-53988",
                "osvdb": null,
                "ghsa": "cfjx-w229-hgx5",
                "unaffected_versions": [
                    "< 1.6.0"
                ],
                "patched_versions": [
                    ">= 1.6.1"
                ],
                "criticality": null
            }
        },
        {
            "type": "unpatched_gem",
            "gem": {
                "name": "rails-html-sanitizer",
                "version": "1.6.0"
            },
            "advisory": {
                "path": "/home/jon/.local/share/ruby-advisory-db/gems/rails-html-sanitizer/CVE-2024-53989.yml",
                "id": "CVE-2024-53989",
                "url": "https://github.com/rails/rails-html-sanitizer/security/advisories/GHSA-rxv5-gxqc-xx8g",
                "title": "rails-html-sanitizer has XSS vulnerability with certain configurations",
                "date": "2024-12-02",
                "description": "## Summary\n\nThere is a possible XSS vulnerability with certain configurations of\nRails::HTML::Sanitizer 1.6.0 when used with Rails >= 7.1.0.\n\n* Versions affected: 1.6.0\n* Not affected: < 1.6.0\n* Fixed versions: 1.6.1\n\n## Impact\n\nA possible XSS vulnerability with certain configurations of\nRails::HTML::Sanitizer may allow an attacker to inject content if\nHTML5 sanitization is enabled and the application developer has\noverridden the sanitizer's allowed tags in the following way:\n\n- the \"noscript\" element is explicitly allowed\n\nCode is only impacted if Rails is configured to use HTML5 sanitization,\nplease see documentation for [`config.action_view.sanitizer_vendor`](https://guides.rubyonrails.org/configuring.html#config-action-view-sanitizer-vendor)\nand [`config.action_text.sanitizer_vendor`](https://guides.rubyonrails.org/configuring.html#config-action-text-sanitizer-vendor)\nfor more information on these configuration options.\n\nThe default configuration is to disallow all of these elements. Code\nis only impacted if allowed tags are being overridden. Applications\nmay be doing this in a few different ways:\n\n1. using application configuration to configure Action View sanitizers'\n   allowed tags:\n\n  ```ruby\n  # In config/application.rb\n  config.action_view.sanitized_allowed_tags = [\"noscript\"]\n  ```\n\n  see https://guides.rubyonrails.org/configuring.html#configuring-action-view\n\n2. using a `:tags` option to the Action View helper `sanitize`:\n\n  ```\n  <= sanitize @comment.body, tags: [\"noscript\"] >\n  ```\n\n  see https://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize\n\n3. setting Rails::HTML5::SafeListSanitizer class attribute `allowed_tags`:\n\n  ```ruby\n  # class-level option\n  Rails::HTML5::SafeListSanitizer.allowed_tags = [\"noscript\"]\n  ```\n\n  (note that this class may also be referenced as\n  `Rails::Html::SafeListSanitizer`)\n\n4. using a `:tags` options to the Rails::HTML5::SafeListSanitizer instance method `sanitize`:\n\n  ```ruby\n  # instance-level option\n  Rails::HTML5::SafeListSanitizer.new.sanitize(@article.body, tags: [\"noscript\"])\n  ```\n\n  (note that this class may also be referenced as\n  `Rails::Html::SafeListSanitizer`)\n\n5. setting ActionText::ContentHelper module attribute `allowed_tags`:\n\n  ```ruby\n  ActionText::ContentHelper.allowed_tags = [\"noscript\"]\n  ```\n\nAll users overriding the allowed tags by any of the above\nmechanisms to include \"noscript\" should either upgrade or use\none of the workarounds.\n\n## Workarounds\n\nAny one of the following actions will work around this issue:\n\n- Remove \"noscript\" from the overridden allowed tags,\n- Or, downgrade sanitization to HTML4 (see documentation for\n  [`config.action_view.sanitizer_vendor`](https://guides.rubyonrails.org/configuring.html#config-action-view-sanitizer-vendor)\n  and [`config.action_text.sanitizer_vendor`](https://guides.rubyonrails.org/configuring.html#config-action-text-sanitizer-vendor)\n  for more information).\n\n## References\n\n- [CWE - CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') (4.9)](https://cwe.mitre.org/data/definitions/79.html)\n- Original report: https://hackerone.com/reports/2509647\n\n## Credit\n\nThis vulnerability was responsibly reported by HackerOne user\n[@taise](https://hackerone.com/taise?type=user).\n",
                "cvss_v2": null,
                "cvss_v3": null,
                "cve": "2024-53989",
                "osvdb": null,
                "ghsa": "rxv5-gxqc-xx8g",
                "unaffected_versions": [
                    "< 1.6.0"
                ],
                "patched_versions": [
                    ">= 1.6.1"
                ],
                "criticality": null
            }
        },
        {
            "type": "unpatched_gem",
            "gem": {
                "name": "rexml",
                "version": "3.2.8"
            },
            "advisory": {
                "path": "/home/jon/.local/share/ruby-advisory-db/gems/rexml/CVE-2024-39908.yml",
                "id": "CVE-2024-39908",
                "url": "https://github.com/ruby/rexml/security/advisories/GHSA-4xqq-m2hx-25v8",
                "title": "DoS in REXML",
                "date": "2024-07-16",
                "description": "There is a DoS vulnerability in REXML gem. This vulnerability has\nbeen assigned the CVE identifier CVE-2024-39908. We strongly\nrecommend upgrading the REXML gem.\n\n## Details\n\nWhen it parses an XML that has many specific characters such as\n<, 0 and %>. REXML gem may take long time.\n\nPlease update REXML gem to version 3.3.2 or later.\n\n## Affected versions\n\nREXML gem 3.3.2 or prior\n\n## Credits\n\nThanks to mprogrammer for discovering this issue.\n\n## History\n\nOriginally published at 2024-07-16 03:00:00 (UTC)\n",
                "cvss_v2": null,
                "cvss_v3": 4.3,
                "cve": "2024-39908",
                "osvdb": null,
                "ghsa": "4xqq-m2hx-25v8",
                "unaffected_versions": [],
                "patched_versions": [
                    ">= 3.3.2"
                ],
                "criticality": "medium"
            }
        },
        {
            "type": "unpatched_gem",
            "gem": {
                "name": "rexml",
                "version": "3.2.8"
            },
            "advisory": {
                "path": "/home/jon/.local/share/ruby-advisory-db/gems/rexml/CVE-2024-41123.yml",
                "id": "CVE-2024-41123",
                "url": "https://www.ruby-lang.org/en/news/2024/08/01/dos-rexml-cve-2024-41123",
                "title": "DoS vulnerabilities in REXML",
                "date": "2024-08-01",
                "description": "There are some DoS vulnerabilities in REXML gem.\nThese vulnerabilities have been assigned the CVE identifier\nCVE-2024-41123. We strongly recommend upgrading the REXML gem.\n\n## Details\n\nWhen parsing an XML document that has many specific characters such\nas whitespace character, >] and ]>, REXML gem may take long time.\n\nPlease update REXML gem to version 3.3.3 or later.\n\n## Affected versions\n\n* REXML gem 3.3.2 or prior\n\n## Credits\n\nThanks to mprogrammer and scyoon for discovering these issues.\n\n## History\n\nOriginally published at 2024-08-01 03:00:00 (UTC)\n",
                "cvss_v2": null,
                "cvss_v3": 5.3,
                "cve": "2024-41123",
                "osvdb": null,
                "ghsa": "r55c-59qm-vjw6",
                "unaffected_versions": [],
                "patched_versions": [
                    ">= 3.3.3"
                ],
                "criticality": "medium"
            }
        },
        {
            "type": "unpatched_gem",
            "gem": {
                "name": "rexml",
                "version": "3.2.8"
            },
            "advisory": {
                "path": "/home/jon/.local/share/ruby-advisory-db/gems/rexml/CVE-2024-41946.yml",
                "id": "CVE-2024-41946",
                "url": "https://www.ruby-lang.org/en/news/2024/08/01/dos-rexml-cve-2024-41946",
                "title": "DoS vulnerabilities in REXML",
                "date": "2024-08-01",
                "description": "There is a DoS vulnerability in REXML gem.\nThis vulnerability has been assigned the CVE identifier\nCVE-2024-41946. We strongly recommend upgrading the REXML gem.\n\n## Details\n\nWhen parsing an XML that has many entity expansions with SAX2 or\npull parser API, REXML gem may take long time.\n\nPlease update REXML gem to version 3.3.3 or later.\n\n## Affected versions\n\n* REXML gem 3.3.2 or prior\n\n## Credits\n\nThanks to NAITOH Jun for discovering and fixing this issue.\n\n## History\n\nOriginally published at 2024-08-01 03:00:00 (UTC)\n",
                "cvss_v2": null,
                "cvss_v3": 5.3,
                "cve": "2024-41946",
                "osvdb": null,
                "ghsa": "5866-49gr-22v4",
                "unaffected_versions": [],
                "patched_versions": [
                    ">= 3.3.3"
                ],
                "criticality": "medium"
            }
        },
        {
            "type": "unpatched_gem",
            "gem": {
                "name": "rexml",
                "version": "3.2.8"
            },
            "advisory": {
                "path": "/home/jon/.local/share/ruby-advisory-db/gems/rexml/CVE-2024-43398.yml",
                "id": "CVE-2024-43398",
                "url": "https://github.com/ruby/rexml/security/advisories/GHSA-vmwr-mc7x-5vc3",
                "title": "REXML denial of service vulnerability",
                "date": "2024-08-22",
                "description": "### Impact\n\nThe REXML gem before 3.3.6 has a DoS vulnerability when it parses an\nXML that has many deep elements that have same local name attributes.\n\nIf you need to parse untrusted XMLs with tree parser API like\n`REXML::Document.new`, you may be impacted to this vulnerability.\nIf you use other parser APIs such as stream parser API and SAX2\nparser API, this vulnerability is not affected.\n\nThis vulnerability has been assigned the CVE identifier CVE-2024-43398.\nWe strongly recommend upgrading the REXML gem.\n\n### Patches\n\nThe REXML gem 3.3.6 or later include the patch to fix the\nvulnerability.\n\n### Workarounds\n\nDon't parse untrusted XMLs with tree parser API.\n\n## Affected versions\n\nREXML gem 3.3.5 or prior\n\n## Credits\n\nThanks to l33thaxor for discovering this issue.\n\n## History\n\nOriginally published at 2024-08-22 03:00:00 (UTC)\n",
                "cvss_v2": null,
                "cvss_v3": 5.9,
                "cve": "2024-43398",
                "osvdb": null,
                "ghsa": "vmwr-mc7x-5vc3",
                "unaffected_versions": [],
                "patched_versions": [
                    ">= 3.3.6"
                ],
                "criticality": "medium"
            }
        },
        {
            "type": "unpatched_gem",
            "gem": {
                "name": "rexml",
                "version": "3.2.8"
            },
            "advisory": {
                "path": "/home/jon/.local/share/ruby-advisory-db/gems/rexml/CVE-2024-49761.yml",
                "id": "CVE-2024-49761",
                "url": "https://github.com/ruby/rexml/security/advisories/GHSA-2rxp-v6pw-ch6m",
                "title": "REXML ReDoS vulnerability",
                "date": "2024-10-28",
                "description": "## Impact\n\nThe REXML gem before 3.3.9 has a ReDoS vulnerability when it\nparses an XML that has many digits between `&#` and `x...;`\nin a hex numeric character reference (`&#x...;`).\n\nThis does not happen with Ruby 3.2 or later. Ruby 3.1 is the only\naffected maintained Ruby. Note that Ruby 3.1 will reach EOL on 2025-03.\n\n## Patches\n\nThe REXML gem 3.3.9 or later include the patch to fix the vulnerability.\n\n## Workarounds\n\nUse Ruby 3.2 or later instead of Ruby 3.1.\n\n## References\n\n* https://www.ruby-lang.org/en/news/2024/10/28/redos-rexml-cve-2024-49761\n  * Announced on www.ruby-lang.org.\n",
                "cvss_v2": null,
                "cvss_v3": 7.5,
                "cve": "2024-49761",
                "osvdb": null,
                "ghsa": "2rxp-v6pw-ch6m",
                "unaffected_versions": [],
                "patched_versions": [
                    ">= 3.3.9"
                ],
                "criticality": "high"
            }
        },
        {
            "type": "unpatched_gem",
            "gem": {
                "name": "webrick",
                "version": "1.8.1"
            },
            "advisory": {
                "path": "/home/jon/.local/share/ruby-advisory-db/gems/webrick/CVE-2024-47220.yml",
                "id": "CVE-2024-47220",
                "url": "https://github.com/advisories/GHSA-6f62-3596-g6w7",
                "title": "HTTP Request Smuggling in ruby webrick",
                "date": "2024-09-22",
                "description": "An issue was discovered in the WEBrick toolkit through 1.8.1 for Ruby.\nIt allows HTTP request smuggling by providing both a Content-Length\nheader and a Transfer-Encoding header, e.g.,\n\"GET /admin HTTP/1.1\\r\\n\" inside of a \"POST /user HTTP/1.1\\r\\n\"\nrequest.\n\nNOTE: the supplier''s position is \"Webrick should not be used in production.\"\n",
                "cvss_v2": null,
                "cvss_v3": 7.5,
                "cve": "2024-47220",
                "osvdb": null,
                "ghsa": "6f62-3596-g6w7",
                "unaffected_versions": [],
                "patched_versions": [
                    ">= 1.8.2"
                ],
                "criticality": "high"
            }
        }
    ]
}