#!/bin/bash

# One-shot setup script for Dual Claude system
# Just run this once and everything will be ready

set -euo pipefail

CURSOR_CONFIG="/home/jon/.config/cursor"
CURSOR_SHARE="/home/jon/.local/share/cursor"
SYSTEMD_USER_DIR="/home/jon/.config/systemd/user"
DEBUG=true

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

debug() {
    if [[ "$DEBUG" == "true" ]]; then
        echo "[DEBUG] $1"
    fi
}

check_dependencies() {
    log "Checking dependencies..."
    local deps=(systemctl jq lsof pkill)
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" >/dev/null 2>&1; then
            log "ERROR: Required dependency '$dep' not found"
            return 1
        fi
    done
}

setup_directories() {
    log "Creating required directories..."
    local dirs=(
        "$CURSOR_SHARE/contexts/project"
        "$CURSOR_SHARE/contexts/system"
        "$CURSOR_SHARE/contexts/.sacred"
        "$CURSOR_SHARE/logs"
        "$CURSOR_SHARE/metrics/claude"
        "$CURSOR_SHARE/state"
        "$CURSOR_SHARE/run"
        "$CURSOR_CONFIG/contexts/patterns"
    )
    
    for dir in "${dirs[@]}"; do
        mkdir -p "$dir"
        debug "Created directory: $dir"
    done
}

check_service_file() {
    local service="$1"
    if [[ ! -f "$SYSTEMD_USER_DIR/$service" ]]; then
        log "ERROR: Service file $service not found"
        return 1
    fi
    debug "Service file exists: $service"
}

stop_existing() {
    log "Stopping existing services..."
    local services=(
        "cursor-startup.service"
        "claude-autonomic-manager.service"
        "cursor-claude-project.slice"
        "cursor-claude-system.slice"
    )
    
    for svc in "${services[@]}"; do
        systemctl --user stop "$svc" 2>/dev/null || true
        debug "Stopped service: $svc"
    done
    
    log "Cleaning up existing processes..."
    pkill -f "cursor.*projects/aether" 2>/dev/null || true
    pkill -f "cursor.*/" 2>/dev/null || true
    
    # Give processes time to clean up
    sleep 2
}

reload_systemd() {
    log "Reloading systemd..."
    systemctl --user daemon-reload
    debug "Systemd reloaded"
}

enable_services() {
    log "Enabling services..."
    local services=(
        "cursor-startup.service"
        "claude-autonomic-manager.service"
    )
    
    for svc in "${services[@]}"; do
        if ! check_service_file "$svc"; then
            return 1
        fi
        systemctl --user enable "$svc"
        debug "Enabled service: $svc"
    done
}

check_service_status() {
    local service="$1"
    local status
    status=$(systemctl --user status "$service" 2>&1)
    debug "Service $service status:"
    debug "$status"
    
    if ! systemctl --user is-active "$service" >/dev/null 2>&1; then
        log "Service $service failed to start. Status:"
        echo "$status"
        return 1
    fi
}

start_services() {
    log "Starting services..."
    
    # Start autonomic manager first
    log "Starting autonomic manager..."
    if ! systemctl --user start claude-autonomic-manager.service; then
        log "ERROR: Failed to start autonomic manager"
        journalctl --user -u claude-autonomic-manager.service -n 50 --no-pager
        return 1
    fi
    
    # Check its status
    if ! check_service_status "claude-autonomic-manager.service"; then
        return 1
    fi
    
    # Start cursor startup service
    log "Starting cursor startup service..."
    if ! systemctl --user start cursor-startup.service; then
        log "ERROR: Failed to start cursor startup service"
        journalctl --user -u cursor-startup.service -n 50 --no-pager
        return 1
    fi
    
    # Check its status
    if ! check_service_status "cursor-startup.service"; then
        return 1
    fi
}

verify_setup() {
    log "Verifying setup..."
    local services=(
        "cursor-startup.service"
        "claude-autonomic-manager.service"
    )
    
    local slices=(
        "cursor-claude-project.slice"
        "cursor-claude-system.slice"
    )
    
    # Check services with detailed output
    for svc in "${services[@]}"; do
        if ! check_service_status "$svc"; then
            return 1
        fi
    done
    
    # Check slices
    for slice in "${slices[@]}"; do
        if ! systemctl --user is-active "$slice" >/dev/null 2>&1; then
            log "ERROR: Slice $slice not active"
            systemctl --user status "$slice"
            return 1
        fi
        debug "Slice active: $slice"
    done
    
    # Give processes time to start
    log "Waiting for processes to start..."
    sleep 5
    
    # Check processes
    if ! pgrep -f "cursor.*projects/aether" >/dev/null; then
        log "ERROR: Project Claude not running"
        return 1
    fi
    debug "Project Claude process running"
    
    if ! pgrep -f "cursor.*/" >/dev/null; then
        log "ERROR: System Claude not running"
        return 1
    fi
    debug "System Claude process running"
    
    return 0
}

cleanup_on_failure() {
    log "Setup failed, cleaning up..."
    stop_existing
    log "Dumping service logs..."
    journalctl --user -u claude-autonomic-manager.service -n 50 --no-pager
    journalctl --user -u cursor-startup.service -n 50 --no-pager
}

main() {
    log "Starting Dual Claude setup..."
    
    if ! check_dependencies; then
        return 1
    fi
    
    setup_directories
    stop_existing
    reload_systemd
    
    if ! enable_services; then
        cleanup_on_failure
        return 1
    fi
    
    if ! start_services; then
        cleanup_on_failure
        return 1
    fi
    
    if verify_setup; then
        log "Setup completed successfully!"
        log "Both Claudes are running and managed autonomically"
        log "You can now close this terminal and start working"
    else
        cleanup_on_failure
        return 1
    fi
}

# Run setup
main 