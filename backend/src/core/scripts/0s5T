#!/bin/bash

# Focus Enhancement System
# Integrates with Essence System and Meta-Learning
# Optimizes for ADHD hyperfocus states

set -euo pipefail

# Configuration
CURSOR_CONFIG_DIR="${CURSOR_CONFIG_DIR:-$HOME/.config/cursor}"
CURSOR_STATE_DIR="${CURSOR_STATE_DIR:-$HOME/.local/state/cursor}"
CURSOR_DATA_DIR="${CURSOR_DATA_DIR:-$HOME/.local/share/cursor}"
FOCUS_DIR="$CURSOR_STATE_DIR/focus"
META_DIR="$CURSOR_STATE_DIR/meta"
HARMONY_DIR="$CURSOR_STATE_DIR/harmony"

# Initialize focus directories
mkdir -p "$FOCUS_DIR"/{state,patterns,flows,insights}

# Focus configuration
declare -A FOCUS_CONFIG=(
    [deep_flow_threshold]=0.9
    [flow_duration_min]=45
    [recovery_duration_min]=15
    [max_deep_sessions]=4
    [min_break_duration]=5
)

# Helper Functions
log() {
    local level=$1
    shift
    echo "[$(date -Iseconds)] [$level] $*" | tee -a "$CURSOR_LOGS_DIR/focus.log"
}

detect_focus_state() {
    # Get system metrics
    local cpu_pressure=$(cat /proc/pressure/cpu | grep "some" | awk '{print $2}' | cut -d= -f2)
    local mem_pressure=$(cat /proc/pressure/memory | grep "some" | awk '{print $2}' | cut -d= -f2)
    local io_pressure=$(cat /proc/pressure/io | grep "some" | awk '{print $2}' | cut -d= -f2)
    
    # Get meta-learning insights
    local meta_insights
    if [[ -f "$META_DIR/insights/current.json" ]]; then
        meta_insights=$(jq -r '.[] | select(.type == "flow_insight")' "$META_DIR/insights/current.json")
    fi
    
    # Get harmony score
    local harmony_score
    if [[ -f "$HARMONY_DIR/state/current.json" ]]; then
        harmony_score=$(jq -r '.harmony_score' "$HARMONY_DIR/state/current.json")
    fi
    
    # Analyze focus indicators
    local focus_score=$(echo "scale=2; (1 - ($cpu_pressure + $mem_pressure + $io_pressure) / 300) * 
        (${harmony_score:-0.5})" | bc)
    
    if (( $(echo "$focus_score >= ${FOCUS_CONFIG[deep_flow_threshold]}" | bc -l) )); then
        echo "deep_flow"
    elif (( $(echo "$focus_score >= 0.7" | bc -l) )); then
        echo "flow"
    else
        echo "normal"
    fi
}

manage_focus_session() {
    local focus_state=$1
    local session_file="$FOCUS_DIR/state/session.json"
    
    # Load or initialize session state
    if [[ -f "$session_file" ]]; then
        local session_data=$(cat "$session_file")
        local session_start=$(echo "$session_data" | jq -r '.start_time')
        local session_type=$(echo "$session_data" | jq -r '.type')
        local duration=$(( $(date +%s) - session_start ))
        
        case "$session_type" in
            "deep_flow")
                if (( duration >= FOCUS_CONFIG[flow_duration_min] * 60 )); then
                    log "INFO" "Deep flow session complete, suggesting break"
                    notify-send "Focus Break" "Deep flow session complete. Take a short break."
                    echo "{
                        \"type\": \"break\",
                        \"start_time\": $(date +%s),
                        \"previous\": \"deep_flow\",
                        \"duration_min\": ${FOCUS_CONFIG[recovery_duration_min]}
                    }" > "$session_file"
                fi
                ;;
            "break")
                if (( duration >= FOCUS_CONFIG[min_break_duration] * 60 )); then
                    log "INFO" "Break complete, ready for next session"
                    notify-send "Focus Ready" "Break complete. Ready for next session."
                    rm -f "$session_file"
                fi
                ;;
        esac
    else
        if [[ "$focus_state" == "deep_flow" ]]; then
            echo "{
                \"type\": \"deep_flow\",
                \"start_time\": $(date +%s),
                \"focus_state\": \"$focus_state\"
            }" > "$session_file"
        fi
    fi
}

optimize_environment() {
    local focus_state=$1
    
    case "$focus_state" in
        "deep_flow")
            # Maximize focus protection
            systemctl --user set-property cursor-context.slice CPUQuota=70%
            systemctl --user set-property cursor-context.slice MemoryHigh=10G
            systemctl --user set-property cursor-context.slice IOWeight=95
            
            # Increase context retention
            sed -i 's/CRYSTAL_RETENTION_DAYS=.*/CRYSTAL_RETENTION_DAYS=30/' \
                "$HOME/scripts/cursor/context-crystallizer"
            
            # Update meta-learning
            echo "{
                \"type\": \"focus_insight\",
                \"state\": \"deep_flow\",
                \"timestamp\": \"$(date -Iseconds)\",
                \"action\": \"protect\"
            }" > "$META_DIR/insights/focus.json"
            ;;
        "flow")
            # Standard focus protection
            systemctl --user set-property cursor-context.slice CPUQuota=50%
            systemctl --user set-property cursor-context.slice MemoryHigh=8G
            systemctl --user set-property cursor-context.slice IOWeight=80
            ;;
        "normal")
            # Optimize for pattern recognition
            systemctl --user set-property cursor-context.slice CPUQuota=30%
            systemctl --user set-property cursor-context.slice MemoryHigh=4G
            systemctl --user set-property cursor-context.slice IOWeight=60
            ;;
    esac
}

analyze_focus_patterns() {
    local focus_state=$1
    local pattern_file="$FOCUS_DIR/patterns/current.json"
    
    # Load or initialize patterns
    if [[ ! -f "$pattern_file" ]]; then
        echo '{
            "patterns": [],
            "meta_patterns": [],
            "last_update": 0
        }' > "$pattern_file"
    fi
    
    # Update patterns
    jq --arg state "$focus_state" \
       --arg time "$(date -Iseconds)" \
       '.patterns += [{
           "state": $state,
           "timestamp": $time,
           "duration": 300
       }] |
       if (.patterns | length) > 1000 then
           .patterns = .patterns[1:]
       else . end |
       .last_update = ($time | fromdateiso8601)' "$pattern_file" > "${pattern_file}.tmp" && \
    mv "${pattern_file}.tmp" "$pattern_file"
    
    # Generate focus insights
    jq -c '
    def pattern_frequency(state):
        [.patterns[] | select(.state == state)] | length;
    
    def average_duration(state):
        [.patterns[] | select(.state == state) | .duration] |
        if length > 0 then (add / length) else 0 end;
    
    {
        timestamp: now,
        patterns: {
            deep_flow: {
                frequency: pattern_frequency("deep_flow"),
                avg_duration: average_duration("deep_flow")
            },
            flow: {
                frequency: pattern_frequency("flow"),
                avg_duration: average_duration("flow")
            }
        },
        insights: [
            if pattern_frequency("deep_flow") > 10 then
                {type: "optimization", message: "High deep flow frequency", action: "protect"}
            else empty end,
            if average_duration("deep_flow") > 3600 then
                {type: "alert", message: "Extended deep flow detected", action: "suggest_break"}
            else empty end
        ]
    }' "$pattern_file" > "$FOCUS_DIR/insights/current.json"
}

apply_focus_insights() {
    if [[ -f "$FOCUS_DIR/insights/current.json" ]]; then
        jq -c '.insights[]' "$FOCUS_DIR/insights/current.json" |
        while read -r insight; do
            local type=$(echo "$insight" | jq -r '.type')
            local action=$(echo "$insight" | jq -r '.action')
            
            case "$type" in
                "optimization")
                    case "$action" in
                        "protect")
                            log "INFO" "Protecting deep flow state"
                            optimize_environment "deep_flow"
                            ;;
                    esac
                    ;;
                "alert")
                    case "$action" in
                        "suggest_break")
                            log "INFO" "Suggesting break after extended flow"
                            notify-send "Focus Alert" "Extended deep flow detected. Consider taking a break."
                            ;;
                    esac
                    ;;
            esac
        done
    fi
}

# Main Loop
log "INFO" "Starting Focus Enhancement System"

while true; do
    # Detect current focus state
    focus_state=$(detect_focus_state)
    log "INFO" "Current focus state: $focus_state"
    
    # Manage focus session
    manage_focus_session "$focus_state"
    
    # Optimize environment
    optimize_environment "$focus_state"
    
    # Analyze patterns
    analyze_focus_patterns "$focus_state"
    
    # Apply insights
    apply_focus_insights
    
    # Archive old data
    find "$FOCUS_DIR" -type f -mtime +7 -not -name "*.pattern" -delete
    
    sleep 30
done 