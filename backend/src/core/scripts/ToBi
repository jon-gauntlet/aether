#!/bin/bash

set -euo pipefail

# Environment setup
CURSOR_CONFIG_DIR="${CURSOR_CONFIG_DIR:-$HOME/.config/cursor}"
CURSOR_STATE_DIR="${CURSOR_STATE_DIR:-$HOME/.local/state/cursor}"
CURSOR_DATA_DIR="${CURSOR_DATA_DIR:-$HOME/.local/share/cursor}"
GAUNTLET_DATA_DIR="${GAUNTLET_DATA_DIR:-$HOME/.local/share/gauntlet}"

# Ensure directories exist
mkdir -p "$GAUNTLET_DATA_DIR"/{stats,metrics,state}

# Logging function
log() {
    echo "[$(date -Iseconds)] $*"
}

# Notify systemd watchdog
notify_watchdog() {
    echo "WATCHDOG=1"
}

# Get JSON value with default
get_json_value() {
    local file="$1"
    local key="$2"
    local default="$3"
    
    if [[ -f "$file" ]]; then
        jq -r ".$key // $default" "$file" 2>/dev/null || echo "$default"
    else
        echo "$default"
    fi
}

# Optimize gauntlet performance
optimize_gauntlet() {
    local timestamp=$(date +%Y%m%d_%H%M%S)
    local stats_file="$GAUNTLET_DATA_DIR/stats/daily_stats.json"
    local metrics_file="$GAUNTLET_DATA_DIR/metrics/optimization_${timestamp}.json"
    local focus_metrics_file="$GAUNTLET_DATA_DIR/state/focus_metrics.json"
    local temp_file=$(mktemp)
    
    # Ensure stats file exists with valid JSON
    if [[ ! -f "$stats_file" ]]; then
        echo "{}" > "$stats_file"
    fi
    
    # Get today's date
    local today=$(date +%Y-%m-%d)
    
    # Read current stats
    local current_stats
    if current_stats=$(jq -r ".[\"$today\"] // {}" "$stats_file" 2>/dev/null); then
        :
    else
        current_stats="{}"
    fi
    
    # Calculate optimization metrics
    {
        echo "{"
        echo "  \"timestamp\": \"$(date -Iseconds)\","
        echo "  \"daily_stats\": $current_stats,"
        echo "  \"system_metrics\": {"
        echo "    \"cpu_usage\": $(top -bn1 | grep "Cpu(s)" | awk '{print $2}'),"
        echo "    \"memory_usage\": $(free | grep Mem | awk '{print $3/$2 * 100}'),"
        echo "    \"swap_usage\": $(free | grep Swap | awk '{print $3/$2 * 100}'),"
        echo "    \"disk_usage\": $(df -h / | tail -1 | awk '{print $5}' | tr -d '%')"
        echo "  },"
        echo "  \"focus_metrics\": {"
        echo "    \"deep_mode_duration\": $(get_json_value "$focus_metrics_file" "deep_mode_duration" "0"),"
        echo "    \"flow_state_duration\": $(get_json_value "$focus_metrics_file" "flow_state_duration" "0"),"
        echo "    \"focus_sessions\": $(get_json_value "$focus_metrics_file" "focus_sessions" "0")"
        echo "  }"
        echo "}"
    } > "$temp_file"

    # Validate JSON before moving to final location
    if jq . "$temp_file" >/dev/null 2>&1; then
        mv "$temp_file" "$metrics_file"
        log "Optimized gauntlet metrics to $metrics_file"
    else
        log "Error: Invalid JSON generated"
        cat "$temp_file" | jq . 2>&1 | log
        rm "$temp_file"
        return 1
    fi

    # Apply optimizations based on metrics
    if [[ $(jq -r '.system_metrics.memory_usage' "$metrics_file") -gt 80 ]]; then
        log "High memory usage detected, triggering cleanup"
        find "$GAUNTLET_DATA_DIR/stats" -type f -name "*.json" -mtime +7 -delete
    fi

    if [[ $(jq -r '.system_metrics.swap_usage' "$metrics_file") -gt 50 ]]; then
        log "High swap usage detected, adjusting memory limits"
        systemctl --user set-property cursor-context.slice MemoryHigh=2G
    fi
}

# Main loop
while true; do
    if optimize_gauntlet; then
        notify_watchdog
    else
        log "Failed to optimize gauntlet metrics"
    fi
    sleep 300  # Run every 5 minutes
done 