#!/bin/bash

# Autonomic Resource Manager
# Integrates with Context System and follows Sacred Principles
# Implements AI-First Autonomic patterns with SRE best practices

set -euo pipefail

# Configuration with existing paths
CURSOR_CONFIG_DIR="${CURSOR_CONFIG_DIR:-$HOME/.config/cursor}"
CURSOR_STATE_DIR="${CURSOR_STATE_DIR:-$HOME/.local/state/cursor}"
CURSOR_DATA_DIR="${CURSOR_DATA_DIR:-$HOME/.local/share/cursor}"
CURSOR_CACHE_DIR="$CURSOR_DATA_DIR/cache"
CURSOR_LOGS_DIR="$CURSOR_DATA_DIR/logs"

# Resource thresholds (adaptive)
declare -A THRESHOLDS=(
    [memory_critical]=90
    [memory_high]=80
    [cpu_critical]=90
    [cpu_high]=80
    [disk_critical]=90
    [disk_high]=80
    [iops_critical]=90
    [iops_high]=80
)

# Learning rates
ALPHA=0.1  # Fast adaptation
BETA=0.01  # Slow trend learning

# Initialize state
mkdir -p "$CURSOR_STATE_DIR/autonomic"
STATE_FILE="$CURSOR_STATE_DIR/autonomic/state.json"
METRICS_FILE="$CURSOR_STATE_DIR/autonomic/metrics.jsonl"
LEARNING_FILE="$CURSOR_STATE_DIR/autonomic/learning.json"

# Ensure initial state
if [[ ! -f "$STATE_FILE" ]]; then
    echo '{
        "mode": "learning",
        "adaptation_level": 1,
        "last_optimization": 0,
        "resource_patterns": {},
        "flow_states": []
    }' > "$STATE_FILE"
fi

# Helper Functions
log() {
    local level=$1
    shift
    echo "[$(date -Iseconds)] [$level] $*" | tee -a "$CURSOR_LOGS_DIR/autonomic.log"
}

notify_systemd() {
    echo "$1"
    [[ -n "${NOTIFY_SOCKET:-}" ]] && systemd-notify "$1"
}

get_pressure_avg() {
    local type=$1
    local metric=$2
    cat "/proc/pressure/$type" 2>/dev/null | grep "$metric" | awk '{print $2}' | cut -d= -f2
}

get_memory_stats() {
    local total used available
    read -r total used available < <(free | grep Mem | awk '{print $2, $3, $7}')
    echo "$used $total $available"
}

get_disk_usage() {
    local dir=$1
    df --output=used,size,avail "$dir" | tail -n1 | awk '{print $1, $2, $3}'
}

detect_flow_state() {
    # Analyze patterns indicating flow state
    local cpu_variance=$(get_pressure_avg "cpu" "some")
    local mem_pattern=$(get_pressure_avg "memory" "some")
    local io_pattern=$(get_pressure_avg "io" "some")
    
    # Check for sustained focused activity
    if (( $(echo "$cpu_variance < 20" | bc -l) )) && \
       (( $(echo "$mem_pattern < 30" | bc -l) )) && \
       (( $(echo "$io_pattern < 40" | bc -l) )); then
        echo "flow"
    else
        echo "normal"
    fi
}

optimize_resources() {
    local mode=$1
    local flow_state=$2
    
    # Read current state
    local state_data=$(cat "$STATE_FILE")
    
    # Adjust based on mode and flow state
    case "$mode" in
        "flow")
            # Protect flow state
            systemctl --user set-property cursor-context.slice MemoryHigh=8G
            systemctl --user set-property cursor-context.slice CPUQuota=50%
            systemctl --user set-property cursor-context.slice IOWeight=90
            
            # Increase context retention
            sed -i 's/CRYSTAL_RETENTION_DAYS=.*/CRYSTAL_RETENTION_DAYS=21/' \
                "$HOME/scripts/cursor/context-crystallizer"
            ;;
        "learning")
            # Optimize for pattern recognition
            systemctl --user set-property cursor-context.slice MemoryHigh=6G
            systemctl --user set-property cursor-context.slice CPUQuota=40%
            systemctl --user set-property cursor-context.slice IOWeight=70
            ;;
        "purge")
            # Clean non-essential resources
            find "$CURSOR_CACHE_DIR" -type f -atime +7 -delete
            find "$CURSOR_DATA_DIR/crystallized" -type f -not -name "*sacred*" \
                -not -name "*gauntlet*" -mtime +14 -delete
            find "$CURSOR_LOGS_DIR" -type f -mtime +30 \
                -not -name "autonomic.log" -delete
            ;;
    esac
}

update_learning() {
    local current_state=$1
    local metrics=$2
    
    # Update learning file with new patterns
    jq --arg state "$current_state" \
       --arg metrics "$metrics" \
       '.patterns += [{state: $state, metrics: $metrics, timestamp: now}]' \
       "$LEARNING_FILE" > "${LEARNING_FILE}.tmp" && \
    mv "${LEARNING_FILE}.tmp" "$LEARNING_FILE"
}

manage_disk_space() {
    local used total avail
    read -r used total avail < <(get_disk_usage "$CURSOR_DATA_DIR")
    
    # Calculate usage percentage
    local usage=$(( 100 * used / total ))
    
    if (( usage > THRESHOLDS[disk_high] )); then
        log "WARN" "High disk usage ($usage%), initiating purge"
        optimize_resources "purge" "normal"
    fi
}

# Main Loop
notify_systemd "READY=1"
log "INFO" "Starting Autonomic Resource Manager"

while true; do
    notify_systemd "WATCHDOG=1"
    
    # Gather current metrics
    mem_stats=$(get_memory_stats)
    cpu_pressure=$(get_pressure_avg "cpu" "some")
    io_pressure=$(get_pressure_avg "io" "some")
    
    # Detect system state
    flow_state=$(detect_flow_state)
    
    # Record metrics
    echo "{
        \"timestamp\": \"$(date -Iseconds)\",
        \"memory\": \"$mem_stats\",
        \"cpu_pressure\": $cpu_pressure,
        \"io_pressure\": $io_pressure,
        \"flow_state\": \"$flow_state\"
    }" >> "$METRICS_FILE"
    
    # Determine optimization mode
    if [[ "$flow_state" == "flow" ]]; then
        optimize_resources "flow" "$flow_state"
    else
        optimize_resources "learning" "$flow_state"
    fi
    
    # Manage disk space
    manage_disk_space
    
    # Update learning patterns
    update_learning "$flow_state" "{
        memory: \"$mem_stats\",
        cpu: $cpu_pressure,
        io: $io_pressure
    }"
    
    sleep 5
done 